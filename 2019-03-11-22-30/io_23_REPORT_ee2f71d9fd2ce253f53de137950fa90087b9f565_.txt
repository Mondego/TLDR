NUMBER OF NEW OR CHANGED ENTITIES : 17
NUMBER OF NEW OR CHANGED TESTS : 65
NUMBER OF ENTITY TO TEST : 44
NUMBER OF TEST TO RUN : 66
TOTAL TIME REQUIRED : 0.678787301 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.input.Tailer.run()
org.apache.commons.io.input.CharSequenceInputStream.<init>($java.lang.CharSequence$java.nio.charset.Charset$int)
org.apache.commons.io.input.CharSequenceInputStream.read($byte[]$int$int)
org.apache.commons.io.input.CharSequenceInputStream.skip($long)
org.apache.commons.io.input.CharSequenceInputStream.available()
org.apache.commons.io.input.CharSequenceInputStream.<init>($java.lang.CharSequence$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStream.<init>($java.lang.CharSequence$java.lang.String$int)
org.apache.commons.io.input.CharSequenceInputStream.<init>($java.lang.CharSequence$java.nio.charset.Charset)
org.apache.commons.io.input.CharSequenceInputStream.read($byte[])
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStream.mark_cbuf
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.input.CharSequenceInputStream.read()
org.apache.commons.io.input.CharSequenceInputStream.mark_bbuf
org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF8()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_AvailableCharset()
org.apache.commons.io.input.compatibility.XmlStreamReader.<clinit>()
org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableSkip($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop($java.lang.String$int)
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_RequiredCharsets()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D20_S0_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_USASCII()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_RequiredCharsets()
org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_RequiredCharsets()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead($java.lang.String$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_RequiredCharset()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S0_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_RequiredCharsets()
org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S2_UTF8()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF16()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF16()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_RequiredCharsets()
org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S1_UTF8()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_USASCII()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_RequiredCharsets()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.checkAvail($java.io.InputStream$int)
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop_RequiredCharsets()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_EmptyString()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF16()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S1_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356($int$int$int$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.<clinit>()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.input.Tailer.run()
org.apache.commons.io.FileUtils.ONE_MB_BI
org.apache.commons.io.input.CharSequenceInputStream.bbuf
org.apache.commons.io.input.CharSequenceInputStream.skip($long)
org.apache.commons.io.input.CharSequenceInputStream.available()
org.apache.commons.io.input.CharSequenceInputStream.<init>($java.lang.CharSequence$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.BOMS
org.apache.commons.io.input.CharSequenceInputStream.<init>($java.lang.CharSequence$java.lang.String$int)
org.apache.commons.io.input.CharSequenceInputStream.<init>($java.lang.CharSequence$java.nio.charset.Charset)
org.apache.commons.io.input.CharSequenceInputStream.read($byte[])
org.apache.commons.io.FileUtils.UTF8
org.apache.commons.io.input.XmlStreamReader.CHARSET_PATTERN
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URLConnection$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.output.XmlStreamWriter.<clinit>()
org.apache.commons.io.input.CharSequenceInputStream.encoder
org.apache.commons.io.monitor.FileAlterationMonitor.run()
org.apache.commons.io.FileUtils.ONE_ZB
org.apache.commons.io.input.CharSequenceInputStream.mark_bbuf
org.apache.commons.io.input.CharSequenceInputStream.fillBuffer()
org.apache.commons.io.input.CharSequenceInputStream.cbuf
org.apache.commons.io.FileUtils.ONE_KB_BI
org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY
org.apache.commons.io.input.CharSequenceInputStream.read($byte[]$int$int)
org.apache.commons.io.input.CharSequenceInputStream.<init>($java.lang.CharSequence$java.nio.charset.Charset$int)
org.apache.commons.io.FileUtils.ONE_EB_BI
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.FileUtils.ONE_PB_BI
org.apache.commons.io.FileUtils.ONE_TB_BI
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.FileUtils.ONE_GB_BI
org.apache.commons.io.input.XmlStreamReader.XML_GUESS_BYTES
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.monitor.FileAlterationObserver.listFiles($java.io.File)
org.apache.commons.io.input.CharSequenceInputStream.mark_cbuf
org.apache.commons.io.FileUtils.decodeUrl($java.lang.String)
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()
org.apache.commons.io.input.XmlStreamReader.ENCODING_PATTERN
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.FileUtils.ONE_YB
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify($org.apache.commons.io.monitor.FileEntry$org.apache.commons.io.monitor.FileEntry[]$java.io.File[])
org.apache.commons.io.input.CharSequenceInputStream.read()
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF8()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_AvailableCharset()
org.apache.commons.io.input.compatibility.XmlStreamReader.<clinit>()
org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableSkip($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop($java.lang.String$int)
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_RequiredCharsets()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D20_S0_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_USASCII()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_RequiredCharsets()
org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_RequiredCharsets()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead($java.lang.String$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_RequiredCharset()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S0_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_RequiredCharsets()
org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S2_UTF8()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSingleByteRead_UTF16()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF16()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_RequiredCharsets()
org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S1_UTF8()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_USASCII()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset_RequiredCharsets()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeSingleByteRead_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.checkAvail($java.io.InputStream$int)
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop_RequiredCharsets()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_EmptyString()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF16()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S1_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeBufferedRead_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_UTF8()
org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356($int$int$int$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.<clinit>()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
