NUMBER OF NEW OR CHANGED ENTITIES : 37
NUMBER OF NEW OR CHANGED TESTS : 84
NUMBER OF ENTITY TO TEST : 63
NUMBER OF TEST TO RUN : 105
TOTAL TIME REQUIRED : 0.794030189 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.FileSystem.IS_OS_WINDOWS
org.apache.commons.io.FileSystem.OS_NAME_WINDOWS_PREFIX
org.apache.commons.io.FileSystem.IS_OS_MAC
org.apache.commons.io.FileSystem.isLegalFileName($java.lang.CharSequence)
org.apache.commons.io.FileSystem.WINDOWS
org.apache.commons.io.FileSystem.maxPathLength
org.apache.commons.io.FileSystem.<init>($java.lang.String$int$int$int$char[]$java.lang.String[])
org.apache.commons.io.FileSystem.getReservedFileNames()
org.apache.commons.io.FileSystem.$VALUES
org.apache.commons.io.FileSystem.IS_OS_LINUX
org.apache.commons.io.FileSystem.illegalFileNameChars
org.apache.commons.io.FileSystem.<clinit>()
org.apache.commons.io.FileSystem.reservedFileNames
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.ByteOrderMark.<clinit>()
org.apache.commons.io.output.XmlStreamWriter.<clinit>()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FileSystem.maxFileNameLength
org.apache.commons.io.ByteOrderMark.toString()
org.apache.commons.io.FileSystem.MAC_OSX
org.apache.commons.io.FileSystem.getIllegalFileNameChars()
org.apache.commons.io.FileSystem.LINUX
org.apache.commons.io.NtfsAdsNameException.serialVersionUID
org.apache.commons.io.output.XmlStreamWriter.detectEncoding($char[]$int$int)
org.apache.commons.io.NtfsAdsNameException.<init>($java.lang.String)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.write($char[]$int$int)
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.FileSystem.GENERIC
org.apache.commons.io.FileSystem.getMaxFileNameLength()
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.FileSystem.getMaxPathLength()
org.apache.commons.io.FileSystem.OS_NAME
org.apache.commons.io.FileSystem.isReservedFileName($java.lang.CharSequence)
org.apache.commons.io.FileSystem.toLegalFileName($java.lang.String$char)
org.apache.commons.io.FileSystem.isIllegalFileNameChar($char)
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.testtools.SystemDefaultsSwitch.<init>()
org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding($java.io.BufferedInputStream)
org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()
org.apache.commons.io.input.compatibility.XmlStreamReader.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure()
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()
org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()
org.apache.commons.io.FileSystemTestCase.testIsLegalName()
org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.input.XmlStreamReaderTest.<init>()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()
org.apache.commons.io.FileSystemTestCase.testSorted()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()
org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.output.XmlStreamWriterTest.<init>()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.input.XmlStreamReaderTest.getXML($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()
org.apache.commons.io.testtools.SystemDefaultsSwitch$1.evaluate()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FileSystemTestCase.testReplacementWithNUL()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()
org.apache.commons.io.testtools.SystemDefaultsSwitch.apply($org.junit.runners.model.Statement$org.junit.runner.Description)
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.input.XmlStreamReaderTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.FileSystemTestCase.<init>()
org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.output.XmlStreamWriterTest.testLowerCaseEncodingWithTurkishLocale_IO_557()
org.apache.commons.io.FileSystemTestCase.testIsReservedFileName()
org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()
org.apache.commons.io.input.XmlStreamReaderTest.testLowerCaseEncodingWithTurkishLocale_IO_557()
org.apache.commons.io.FilenameUtilsTestCase.<clinit>()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.testtools.SystemDefaultsSwitch.applyLocale($org.apache.commons.io.testtools.SystemDefaults$org.junit.runners.model.Statement)
org.apache.commons.io.FileSystemTestCase.testToLegalFileNameWindows()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.FileSystem.IS_OS_MAC
org.apache.commons.io.FileSystem.WINDOWS
org.apache.commons.io.output.XmlStreamWriter.writer
org.apache.commons.io.FileSystem.reservedFileNames
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URLConnection$java.lang.String)
org.apache.commons.io.ByteOrderMark.UTF_32LE
org.apache.commons.io.ByteOrderMark.UTF_8
org.apache.commons.io.output.XmlStreamWriter.<clinit>()
org.apache.commons.io.FileSystem.maxFileNameLength
org.apache.commons.io.FilenameUtils.isSystemWindows()
org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR
org.apache.commons.io.IOCase.<clinit>()
org.apache.commons.io.ByteOrderMark.UTF_16BE
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.output.XmlStreamWriter.write($char[]$int$int)
org.apache.commons.io.input.XmlStreamReader.XML_GUESS_BYTES
org.apache.commons.io.FileSystem.getMaxFileNameLength()
org.apache.commons.io.FileSystem.GENERIC
org.apache.commons.io.output.XmlStreamWriter.close()
org.apache.commons.io.FileSystem.getMaxPathLength()
org.apache.commons.io.input.XmlStreamReader.ENCODING_PATTERN
org.apache.commons.io.FileSystem.isReservedFileName($java.lang.CharSequence)
org.apache.commons.io.FileSystem.toLegalFileName($java.lang.String$char)
org.apache.commons.io.FileSystem.isIllegalFileNameChar($char)
org.apache.commons.io.FileSystem.IS_OS_WINDOWS
org.apache.commons.io.FileSystem.OS_NAME_WINDOWS_PREFIX
org.apache.commons.io.FileSystem.isLegalFileName($java.lang.CharSequence)
org.apache.commons.io.FileSystem.maxPathLength
org.apache.commons.io.FileSystem.<init>($java.lang.String$int$int$int$char[]$java.lang.String[])
org.apache.commons.io.FileSystem.getReservedFileNames()
org.apache.commons.io.input.XmlStreamReader.BOMS
org.apache.commons.io.FileSystem.$VALUES
org.apache.commons.io.FileSystem.IS_OS_LINUX
org.apache.commons.io.FileSystem.illegalFileNameChars
org.apache.commons.io.output.XmlStreamWriter.flush()
org.apache.commons.io.input.XmlStreamReader.CHARSET_PATTERN
org.apache.commons.io.FileSystem.<clinit>()
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.encoding
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.ByteOrderMark.<clinit>()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.ByteOrderMark.toString()
org.apache.commons.io.FileSystem.MAC_OSX
org.apache.commons.io.FileSystem.getIllegalFileNameChars()
org.apache.commons.io.NtfsAdsNameException.serialVersionUID
org.apache.commons.io.FileSystem.LINUX
org.apache.commons.io.ByteOrderMark.UTF_16LE
org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR_STR
org.apache.commons.io.output.XmlStreamWriter.xmlPrologWriter
org.apache.commons.io.output.XmlStreamWriter.getEncoding()
org.apache.commons.io.output.XmlStreamWriter.detectEncoding($char[]$int$int)
org.apache.commons.io.ByteOrderMark.UTF_32BE
org.apache.commons.io.input.BOMInputStream.<init>($java.io.InputStream)
org.apache.commons.io.NtfsAdsNameException.<init>($java.lang.String)
org.apache.commons.io.input.BOMInputStream.<init>($java.io.InputStream$boolean)
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.FileSystem.OS_NAME
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR
org.apache.commons.io.output.XmlStreamWriter.ENCODING_PATTERN
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.ByteOrderMarkTestCase.constantCharsetNames()
org.apache.commons.io.testtools.SystemDefaultsSwitch.<init>()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()
org.apache.commons.io.FileSystemTestCase.testSorted()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()
org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()
org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.testtools.SystemDefaultsSwitch.apply($org.junit.runners.model.Statement$org.junit.runner.Description)
org.apache.commons.io.ByteOrderMarkTestCase.testToString()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()
org.apache.commons.io.input.XmlStreamReaderTest.<clinit>()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs4()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.FileSystemTestCase.<init>()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()
org.apache.commons.io.FileSystemTestCase.testIsReservedFileName()
org.apache.commons.io.input.XmlStreamReaderTest.testLowerCaseEncodingWithTurkishLocale_IO_557()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.testtools.SystemDefaultsSwitch.applyLocale($org.apache.commons.io.testtools.SystemDefaults$org.junit.runners.model.Statement)
org.apache.commons.io.FileSystemTestCase.testToLegalFileNameWindows()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()
org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding($java.io.BufferedInputStream)
org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()
org.apache.commons.io.input.compatibility.XmlStreamReader.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()
org.apache.commons.io.FileSystemTestCase.testIsLegalName()
org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.input.XmlStreamReaderTest.<init>()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()
org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()
org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()
org.apache.commons.io.output.XmlStreamWriterTest.<init>()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()
org.apache.commons.io.input.XmlStreamReaderTest.getXML($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.testtools.SystemDefaultsSwitch$1.evaluate()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()
org.apache.commons.io.FileUtilsTestCase.createCircularSymLink($java.io.File)
org.apache.commons.io.FileSystemTestCase.testReplacementWithNUL()
org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs2()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()
org.apache.commons.io.output.XmlStreamWriterTest.testLowerCaseEncodingWithTurkishLocale_IO_557()
org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()
org.apache.commons.io.FilenameUtilsTestCase.<clinit>()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
