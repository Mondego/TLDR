NUMBER OF NEW OR CHANGED ENTITIES : 63
NUMBER OF NEW OR CHANGED TESTS : 86
NUMBER OF ENTITY TO TEST : 189
NUMBER OF TEST TO RUN : 296
TOTAL TIME REQUIRED : 1.021398722 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.comparator.DirectoryFileComparator.<clinit>()
org.apache.commons.io.FilenameUtils.getFullPath($java.lang.String)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.util.Collection)
org.apache.commons.io.comparator.DirectoryFileComparator.compare($java.lang.Object$java.lang.Object)
org.apache.commons.io.input.ReversedLinesFileReader.readLine()
org.apache.commons.io.comparator.DirectoryFileComparator.toString()
org.apache.commons.io.comparator.DirectoryFileComparator.sort($java.util.List)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.<clinit>()
org.apache.commons.io.FilenameUtils.indexOfExtension($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.DEFAULT_BLOCK_SIZE
org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FilenameUtils.getPathNoEndSeparator($java.lang.String)
org.apache.commons.io.input.Tailer.<init>($java.io.File$java.nio.charset.Charset$org.apache.commons.io.input.TailerListener$long$boolean$boolean$int)
org.apache.commons.io.input.ReversedLinesFileReader.close()
org.apache.commons.io.FilenameUtils.removeExtension($java.lang.String)
org.apache.commons.io.FileUtils.toFile($java.net.URL)
org.apache.commons.io.input.Tailer.readLines($java.io.RandomAccessFile)
org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FilenameUtils.doGetPath($java.lang.String$int)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator($java.lang.String)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String$boolean$org.apache.commons.io.IOCase)
org.apache.commons.io.output.XmlStreamWriter.write($char[]$int$int)
org.apache.commons.io.comparator.DirectoryFileComparator.TYPE_DIRECTORY
org.apache.commons.io.input.Tailer.charset
org.apache.commons.io.FilenameUtils.EMPTY_STRING
org.apache.commons.io.FilenameUtils.failIfNullBytePresent($java.lang.String)
org.apache.commons.io.FilenameUtils.getBaseName($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.EMPTY_STRING
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.comparator.DirectoryFileComparator.sort($java.io.File[])
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File)
org.apache.commons.io.FilenameUtils.getAdsCriticalOffset($java.lang.String)
org.apache.commons.io.comparator.DirectoryFileComparator.TYPE_FILE
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.ByteOrderMark.<clinit>()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.ByteOrderMark.toString()
org.apache.commons.io.FilenameUtils.equalsOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.getPrefixLength($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$int$java.lang.String)
org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.getPath($java.lang.String)
org.apache.commons.io.FilenameUtils.separatorsToSystem($java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.detectEncoding($char[]$int$int)
org.apache.commons.io.input.UnixLineEndingInputStream.read()
org.apache.commons.io.FilenameUtils.getExtension($java.lang.String)
org.apache.commons.io.comparator.DirectoryFileComparator.getType($java.io.File)
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.getXmlProlog($java.io.InputStream$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.FilenameUtils.equalsNormalized($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.FilenameUtils.getName($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$int$java.nio.charset.Charset)
org.apache.commons.io.FilenameUtils.getPrefix($java.lang.String)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.lang.String[])
org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.doGetFullPath($java.lang.String$boolean)
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.testtools.SystemDefaultsSwitch.<init>()
org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding($java.io.BufferedInputStream)
org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.createXmlContent($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()
org.apache.commons.io.input.compatibility.XmlStreamReader.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure()
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()
org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.testtools.SystemDefaultsSwitch$1.<init>($org.apache.commons.io.testtools.SystemDefaultsSwitch$java.util.Locale$org.junit.runners.model.Statement)
org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()
org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.input.XmlStreamReaderTest.<init>()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()
org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.output.XmlStreamWriterTest.<init>()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.input.XmlStreamReaderTest.getXML($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()
org.apache.commons.io.testtools.SystemDefaultsSwitch$1.evaluate()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.testtools.SystemDefaultsSwitch.apply($org.junit.runners.model.Statement$org.junit.runner.Description)
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog($java.io.BufferedInputStream$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding($java.io.BufferedInputStream)
org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.output.XmlStreamWriterTest.testLowerCaseEncodingWithTurkishLocale_IO_557()
org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()
org.apache.commons.io.input.XmlStreamReaderTest.testLowerCaseEncodingWithTurkishLocale_IO_557()
org.apache.commons.io.FilenameUtilsTestCase.<clinit>()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.testtools.SystemDefaultsSwitch.applyLocale($org.apache.commons.io.testtools.SystemDefaults$org.junit.runners.model.Statement)
org.apache.commons.io.testtools.SystemDefaults.locale()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.input.Tailer.run()
org.apache.commons.io.comparator.DirectoryFileComparator.<clinit>()
org.apache.commons.io.FilenameUtils.getFullPath($java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.writer
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream)
org.apache.commons.io.input.Tailer.<init>($java.io.File$org.apache.commons.io.input.TailerListener$long$boolean$boolean)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.util.Collection)
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File)
org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator($java.lang.String$boolean)
org.apache.commons.io.input.Tailer.<init>($java.io.File$org.apache.commons.io.input.TailerListener)
org.apache.commons.io.comparator.DirectoryFileComparator.toString()
org.apache.commons.io.comparator.DirectoryFileComparator.sort($java.util.List)
org.apache.commons.io.serialization.WildcardClassNameMatcher.matches($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.doRawStream($org.apache.commons.io.input.BOMInputStream$org.apache.commons.io.input.BOMInputStream$boolean)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.filterList($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.input.Tailer.create($java.io.File$org.apache.commons.io.input.TailerListener$long$boolean$boolean)
org.apache.commons.io.output.XmlStreamWriter.<clinit>()
org.apache.commons.io.ByteOrderMark.UTF_8
org.apache.commons.io.input.Tailer.<init>($java.io.File$org.apache.commons.io.input.TailerListener$long)
org.apache.commons.io.FilenameUtils.indexOfExtension($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.DEFAULT_BLOCK_SIZE
org.apache.commons.io.input.ReversedLinesFileReader.access$500($org.apache.commons.io.input.ReversedLinesFileReader)
org.apache.commons.io.FilenameUtils.getPathNoEndSeparator($java.lang.String)
org.apache.commons.io.FilenameUtils.isSystemWindows()
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URL)
org.apache.commons.io.input.Tailer.<init>($java.io.File$java.nio.charset.Charset$org.apache.commons.io.input.TailerListener$long$boolean$boolean$int)
org.apache.commons.io.input.Tailer.getDelay()
org.apache.commons.io.FileSystemUtils.freeSpaceKb()
org.apache.commons.io.input.ReversedLinesFileReader.close()
org.apache.commons.io.input.Tailer.<init>($java.io.File$org.apache.commons.io.input.TailerListener$long$boolean$boolean$int)
org.apache.commons.io.FilenameUtils.removeExtension($java.lang.String)
org.apache.commons.io.FileUtils.toFile($java.net.URL)
org.apache.commons.io.input.Tailer.readLines($java.io.RandomAccessFile)
org.apache.commons.io.FilenameUtils.doGetPath($java.lang.String$int)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String$boolean$org.apache.commons.io.IOCase)
org.apache.commons.io.input.ReversedLinesFileReader.access$300($org.apache.commons.io.input.ReversedLinesFileReader)
org.apache.commons.io.input.ReversedLinesFileReader.encoding
org.apache.commons.io.input.XmlStreamReader.XML_GUESS_BYTES
org.apache.commons.io.output.XmlStreamWriter.close()
org.apache.commons.io.input.Tailer.file
org.apache.commons.io.FilenameUtils.EMPTY_STRING
org.apache.commons.io.input.XmlStreamReader.ENCODING_PATTERN
org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.currentFilePart
org.apache.commons.io.input.ReversedLinesFileReader.blockSize
org.apache.commons.io.FilenameUtils.getBaseName($java.lang.String)
org.apache.commons.io.input.Tailer.reOpen
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.File)
org.apache.commons.io.input.Tailer.getFile()
org.apache.commons.io.input.Tailer.getRun()
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.comparator.DirectoryFileComparator.sort($java.io.File[])
org.apache.commons.io.output.XmlStreamWriter.flush()
org.apache.commons.io.input.Tailer.listener
org.apache.commons.io.input.XmlStreamReader.CHARSET_PATTERN
org.apache.commons.io.FilenameUtils.getAdsCriticalOffset($java.lang.String)
org.apache.commons.io.filefilter.OrFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.access$800($org.apache.commons.io.input.ReversedLinesFileReader)
org.apache.commons.io.comparator.ExtensionFileComparator.compare($java.io.File$java.io.File)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean)
org.apache.commons.io.FilenameUtils.equalsOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.filterSet($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.ByteOrderMark.UTF_16LE
org.apache.commons.io.FilenameUtils.getPrefixLength($java.lang.String)
org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.avoidNewlineSplitBufferSize
org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean)
org.apache.commons.io.output.XmlStreamWriter.getEncoding()
org.apache.commons.io.output.XmlStreamWriter.xmlPrologWriter
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.separatorsToSystem($java.lang.String)
org.apache.commons.io.input.Tailer.inbuf
org.apache.commons.io.input.Tailer.create($java.io.File$java.nio.charset.Charset$org.apache.commons.io.input.TailerListener$long$boolean$boolean$int)
org.apache.commons.io.FilenameUtils.concat($java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.detectEncoding($char[]$int$int)
org.apache.commons.io.input.BOMInputStream.<init>($java.io.InputStream)
org.apache.commons.io.input.UnixLineEndingInputStream.read()
org.apache.commons.io.FilenameUtils.getExtension($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader$FilePart.rollOver()
org.apache.commons.io.input.ReversedLinesFileReader$FilePart.getNewLineMatchByteCount($byte[]$int)
org.apache.commons.io.FileSystemUtils.freeSpace($java.lang.String)
org.apache.commons.io.input.Tailer.end
org.apache.commons.io.serialization.ValidatingObjectInputStream.validateClassName($java.lang.String)
org.apache.commons.io.FilenameUtils.getName($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader$FilePart.access$100($org.apache.commons.io.input.ReversedLinesFileReader$FilePart)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.lang.String[])
org.apache.commons.io.output.XmlStreamWriter.ENCODING_PATTERN
org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FileSystemUtils.freeSpaceOS($java.lang.String$int$boolean$long)
org.apache.commons.io.input.ReversedLinesFileReader.totalByteLength
org.apache.commons.io.FileUtils.toFiles($java.net.URL[])
org.apache.commons.io.input.ReversedLinesFileReader$FilePart.readLine()
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File)
org.apache.commons.io.input.ReversedLinesFileReader$FilePart.access$200($org.apache.commons.io.input.ReversedLinesFileReader$FilePart)
org.apache.commons.io.comparator.ExtensionFileComparator.compare($java.lang.Object$java.lang.Object)
org.apache.commons.io.comparator.DirectoryFileComparator.compare($java.lang.Object$java.lang.Object)
org.apache.commons.io.input.ReversedLinesFileReader.readLine()
org.apache.commons.io.input.ReversedLinesFileReader.trailingNewlineOfFileSkipped
org.apache.commons.io.input.ReversedLinesFileReader.access$600($org.apache.commons.io.input.ReversedLinesFileReader)
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URLConnection$java.lang.String)
org.apache.commons.io.ByteOrderMark.UTF_32LE
org.apache.commons.io.input.Tailer.create($java.io.File$org.apache.commons.io.input.TailerListener$long$boolean$int)
org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File)
org.apache.commons.io.FileSystemUtils.freeSpaceKb($long)
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable$java.util.Collection)
org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR
org.apache.commons.io.IOCase.<clinit>()
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.input.ReversedLinesFileReader.byteDecrement
org.apache.commons.io.ByteOrderMark.UTF_16BE
org.apache.commons.io.FilenameUtils.doNormalize($java.lang.String$char$boolean)
org.apache.commons.io.input.Tailer.create($java.io.File$org.apache.commons.io.input.TailerListener$long)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.totalBlockCount
org.apache.commons.io.output.XmlStreamWriter.write($char[]$int$int)
org.apache.commons.io.input.ReversedLinesFileReader.newLineSequences
org.apache.commons.io.input.XmlStreamReader.doLenientDetection($java.lang.String$org.apache.commons.io.input.XmlStreamReaderException)
org.apache.commons.io.comparator.DirectoryFileComparator.TYPE_DIRECTORY
org.apache.commons.io.input.Tailer.charset
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File)
org.apache.commons.io.FilenameUtils.normalize($java.lang.String$boolean)
org.apache.commons.io.input.Tailer.<init>($java.io.File$org.apache.commons.io.input.TailerListener$long$boolean)
org.apache.commons.io.input.Tailer.create($java.io.File$org.apache.commons.io.input.TailerListener)
org.apache.commons.io.FilenameUtils.failIfNullBytePresent($java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.filterList($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.input.ReversedLinesFileReader.access$400($org.apache.commons.io.input.ReversedLinesFileReader)
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.EMPTY_STRING
org.apache.commons.io.input.Tailer.run
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.Tailer.create($java.io.File$org.apache.commons.io.input.TailerListener$long$boolean$boolean$int)
org.apache.commons.io.input.XmlStreamReader.BOMS
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.Tailer.create($java.io.File$org.apache.commons.io.input.TailerListener$long$boolean)
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File)
org.apache.commons.io.comparator.DirectoryFileComparator.TYPE_FILE
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean$java.lang.String)
org.apache.commons.io.FileSystemUtils.freeSpaceWindows($java.lang.String$long)
org.apache.commons.io.output.XmlStreamWriter.encoding
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.ByteOrderMark.<clinit>()
org.apache.commons.io.ByteOrderMark.toString()
org.apache.commons.io.comparator.DirectoryFileComparator.DIRECTORY_REVERSE
org.apache.commons.io.input.Tailer.<init>($java.io.File$org.apache.commons.io.input.TailerListener$long$boolean$int)
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.doHttpStream($org.apache.commons.io.input.BOMInputStream$org.apache.commons.io.input.BOMInputStream$java.lang.String$boolean)
org.apache.commons.io.input.ReversedLinesFileReader.randomAccessFile
org.apache.commons.io.input.Tailer.delayMillis
org.apache.commons.io.comparator.DirectoryFileComparator.DIRECTORY_COMPARATOR
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$int$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.filterSet($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR_STR
org.apache.commons.io.FilenameUtils.getPath($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.access$700($org.apache.commons.io.input.ReversedLinesFileReader)
org.apache.commons.io.input.ReversedLinesFileReader$FilePart.<init>($org.apache.commons.io.input.ReversedLinesFileReader$long$int$byte[]$org.apache.commons.io.input.ReversedLinesFileReader$1)
org.apache.commons.io.comparator.DirectoryFileComparator.compare($java.io.File$java.io.File)
org.apache.commons.io.ByteOrderMark.UTF_32BE
org.apache.commons.io.input.BOMInputStream.<init>($java.io.InputStream$boolean)
org.apache.commons.io.comparator.DirectoryFileComparator.getType($java.io.File)
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.getXmlProlog($java.io.InputStream$java.lang.String)
org.apache.commons.io.FilenameUtils.normalize($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.FilenameUtils.equalsNormalized($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.OrFileFilter.accept($java.io.File)
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$int$java.nio.charset.Charset)
org.apache.commons.io.FileSystemUtils.freeSpaceKb($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.FilenameUtils.getPrefix($java.lang.String)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.lang.String)
org.apache.commons.io.FileSystemUtils.freeSpaceKb($java.lang.String$long)
org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR
org.apache.commons.io.FilenameUtils.doGetFullPath($java.lang.String$boolean)
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File)
org.apache.commons.io.serialization.ValidatingObjectInputStream.resolveClass($java.io.ObjectStreamClass)
org.apache.commons.io.input.ReversedLinesFileReader$FilePart.<init>($org.apache.commons.io.input.ReversedLinesFileReader$long$int$byte[])
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()
org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithoutBOM()
org.apache.commons.io.output.XmlStreamWriterTest.createXmlContent($java.lang.String$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithoutBOM()
org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortListNull()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileCRBreaks()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF16()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.FileUtilsTestCase.testToFile1()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Be()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()
org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()
org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithBOM()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.serialization.WildcardClassNameMatcherTest.star()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingUTF16()
org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()
org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be()
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()
org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf8()
org.apache.commons.io.serialization.WildcardClassNameMatcherTest.starAndQuestionMark()
org.apache.commons.io.serialization.RegexpClassNameMatcherTest.testSimplePatternFromString()
org.apache.commons.io.input.TailerTest.testMultiByteBreak()
org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMSingleRead()
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()
org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be()
org.apache.commons.io.input.BOMInputStreamTest.testClose()
org.apache.commons.io.input.TailerTest.testTailerEndOfFileReached()
org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()
org.apache.commons.io.FileUtilsTestCase.testToFile2()
org.apache.commons.io.comparator.ComparatorAbstractTestCase.testToString()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testWindows31jFile()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalUTF32()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()
org.apache.commons.io.testtools.SystemDefaultsSwitch.apply($org.junit.runners.model.Statement$org.junit.runner.Description)
org.apache.commons.io.input.TailerTest.testInterrupt()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()
org.apache.commons.io.input.XmlStreamReaderTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingNoBOM()
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testAppXml()
org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileDefaults()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.closeReader()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()
org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingBig5()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()
org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkTextXml($boolean$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()
org.apache.commons.io.input.compatibility.XmlStreamReader.<clinit>()
org.apache.commons.io.input.TailerTest.testBufferBreak()
org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()
org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()
org.apache.commons.io.FileUtilsTestCase.testToFiles4()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()
org.apache.commons.io.input.BOMInputStreamTest.skipReturnValueWithBom()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()
org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()
org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()
org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()
org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()
org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()
org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testSkipWithoutBOM()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader.<init>($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testTextXml()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()
org.apache.commons.io.input.TailerTest.testLongFile()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()
org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()
org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testxWindows949File()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testGBK()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()
org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()
org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.testtools.SystemDefaultsSwitch$1.evaluate()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.DirectoryWalkerTestCase.<clinit>()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FileUtilsTestCase.createCircularSymLink($java.io.File)
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()
org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()
org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithBOM()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkAppXml($boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard()
org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding($java.io.BufferedInputStream)
org.apache.commons.io.FilenameUtilsTestCase.testConcat()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()
org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()
org.apache.commons.io.FilenameUtilsTestCase.<clinit>()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le()
org.apache.commons.io.DirectoryWalkerTestCaseJava4.<clinit>()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()
org.apache.commons.io.testtools.SystemDefaults.locale()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
org.apache.commons.io.input.TailerTest.testStopWithNoFile()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()
org.apache.commons.io.ByteOrderMarkTestCase.constantCharsetNames()
org.apache.commons.io.testtools.SystemDefaultsSwitch.<init>()
org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()
org.apache.commons.io.FileUtilsTestCase.testToFiles2()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()
org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithBOM()
org.apache.commons.io.input.TailerTest.testTailer()
org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()
org.apache.commons.io.FileUtilsTestCase.testToFile5()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandardUtf32()
org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()
org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8File()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()
org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testNormalize_with_nullbytes()
org.apache.commons.io.comparator.SizeFileComparatorTest.testNonexistantFile()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.serialization.WildcardClassNameMatcherTest.noPattern()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()
org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithBOM()
org.apache.commons.io.input.TailerTest.testTailerEof()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()
org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaks()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()
org.apache.commons.io.FileUtilsTestCase.testToFiles3()
org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()
org.apache.commons.io.FileUtilsTestCase.testToFileUtf8()
org.apache.commons.io.serialization.RegexpClassNameMatcherTest.testOrPattern()
org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithoutBOM()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()
org.apache.commons.io.ByteOrderMarkTestCase.testToString()
org.apache.commons.io.FileUtilsTestCase.testToFiles3a()
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs4()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testxWindows950File()
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()
org.apache.commons.io.input.XmlStreamReaderTest.testLowerCaseEncodingWithTurkishLocale_IO_557()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF8FileWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()
org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()
org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithBOM()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.closeReader()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()
org.apache.commons.io.testtools.SystemDefaultsSwitch.applyLocale($org.apache.commons.io.testtools.SystemDefaults$org.junit.runners.model.Statement)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16BEFile()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeEncoding()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()
org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding($java.io.BufferedInputStream)
org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()
org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.closeReader()
org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()
org.apache.commons.io.FileUtilsTestCase.testToFile3()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()
org.apache.commons.io.testtools.SystemDefaultsSwitch$1.<init>($org.apache.commons.io.testtools.SystemDefaultsSwitch$java.util.Locale$org.junit.runners.model.Statement)
org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithoutBOM()
org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithoutBOM()
org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.filefilter.FileFilterTestCase.testNot()
org.apache.commons.io.input.XmlStreamReaderTest.<init>()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Le()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()
org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()
org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeEncoding($java.lang.String$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines($org.apache.commons.io.input.ReversedLinesFileReader)
org.apache.commons.io.output.XmlStreamWriterTest.<init>()
org.apache.commons.io.input.BOMInputStreamTest.testSkipWithBOM()
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()
org.apache.commons.io.filefilter.FileFilterTestCase.testOr()
org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()
org.apache.commons.io.serialization.RegexpClassNameMatcherTest.testSimplePatternFromPattern()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()
org.apache.commons.io.input.XmlStreamReaderTest.getXML($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()
org.apache.commons.io.FileUtilsTestCase.testToFile4()
org.apache.commons.io.FileUtilsTestCase.testToFiles1()
org.apache.commons.io.input.BOMInputStreamTest.skipReturnValueWithoutBom()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()
org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()
org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs2()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()
org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()
org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog($java.io.BufferedInputStream$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()
org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()
org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()
org.apache.commons.io.output.XmlStreamWriterTest.testLowerCaseEncodingWithTurkishLocale_IO_557()
org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArrayNull()
org.apache.commons.io.input.TailerTest.testIO335()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUTF16LEFile()
