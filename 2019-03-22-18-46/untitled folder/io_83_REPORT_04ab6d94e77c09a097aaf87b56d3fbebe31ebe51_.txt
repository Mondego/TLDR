NUMBER OF NEW OR CHANGED ENTITIES : 181
NUMBER OF NEW OR CHANGED TESTS : 84
NUMBER OF ENTITY TO TEST : 294
NUMBER OF TEST TO RUN : 389
TOTAL TIME REQUIRED : 1.161325599 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.FilenameUtils.getFullPath($java.lang.String)
org.apache.commons.io.FileUtils.writeByteArrayToFile($java.io.File$byte[]$int$int)
org.apache.commons.io.FileUtils.isFileOlder($java.io.File$java.io.File)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.util.Collection)
org.apache.commons.io.FileUtils.sizeOfDirectoryBig0($java.io.File)
org.apache.commons.io.FileUtils.moveFile($java.io.File$java.io.File)
org.apache.commons.io.input.AbstractCharacterFilterReader.read($char[]$int$int)
org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator($java.lang.String$boolean)
org.apache.commons.io.FileUtils.copyFile($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.indexOfExtension($java.lang.String)
org.apache.commons.io.FileUtils.waitFor($java.io.File$int)
org.apache.commons.io.FileUtils.lineIterator($java.io.File)
org.apache.commons.io.FilenameUtils.getPathNoEndSeparator($java.lang.String)
org.apache.commons.io.monitor.FileAlterationMonitor.run()
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$java.nio.charset.Charset$boolean)
org.apache.commons.io.FileUtils.copyDirectory($java.io.File$java.io.File$java.io.FileFilter)
org.apache.commons.io.FilenameUtils.removeExtension($java.lang.String)
org.apache.commons.io.FileUtils.toFile($java.net.URL)
org.apache.commons.io.FileUtils.copyToDirectory($java.lang.Iterable$java.io.File)
org.apache.commons.io.FilenameUtils.isValidHostName($java.lang.String)
org.apache.commons.io.FileUtils.directoryContains($java.io.File$java.io.File)
org.apache.commons.io.input.AbstractCharacterFilterReader.<init>($java.io.Reader)
org.apache.commons.io.FilenameUtils.doGetPath($java.lang.String$int)
org.apache.commons.io.input.CharacterSetFilterReader.filter($int)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String$boolean$org.apache.commons.io.IOCase)
org.apache.commons.io.FileUtils.sizeOfDirectory0($java.io.File)
org.apache.commons.io.FileSystem.getMaxFileNameLength()
org.apache.commons.io.FileUtils.moveDirectoryToDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FileUtils.innerListFilesOrDirectories($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter$boolean)
org.apache.commons.io.monitor.FileAlterationMonitor.stop($long)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$java.lang.String$boolean)
org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator($java.lang.String)
org.apache.commons.io.FileUtils.writeByteArrayToFile($java.io.File$byte[]$boolean)
org.apache.commons.io.FileUtils.validateMoveParameters($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.forceMkdir($java.io.File)
org.apache.commons.io.FilenameUtils.getBaseName($java.lang.String)
org.apache.commons.io.FileUtils.checksum($java.io.File$java.util.zip.Checksum)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$java.nio.charset.Charset$boolean)
org.apache.commons.io.FileUtils.forceMkdirParent($java.io.File)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.lang.String$java.util.Collection$java.lang.String)
org.apache.commons.io.FileSystem.isOsNameMatch($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.copyURLToFile($java.net.URL$java.io.File)
org.apache.commons.io.FileUtils.iterateFilesAndDirs($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.FilenameUtils.BASE_16
org.apache.commons.io.FileUtils.sizeOfDirectory($java.io.File)
org.apache.commons.io.input.CharacterSetFilterReader.EMPTY_SET
org.apache.commons.io.FileUtils.sizeOfBig0($java.io.File)
org.apache.commons.io.FileUtils.isFileOlder($java.io.File$java.util.Date)
org.apache.commons.io.FileUtils.writeByteArrayToFile($java.io.File$byte[]$int$int$boolean)
org.apache.commons.io.input.CharacterFilterReader.skip
org.apache.commons.io.FileSystem.<clinit>()
org.apache.commons.io.FilenameUtils.getAdsCriticalOffset($java.lang.String)
org.apache.commons.io.FileUtils.forceDelete($java.io.File)
org.apache.commons.io.FileUtils.iterateFiles($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileSystem.isCasePreserving()
org.apache.commons.io.FileUtils.iterateFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.input.CharacterSetFilterReader.<clinit>()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FilenameUtils.IPV4_MAX_OCTET_VALUE
org.apache.commons.io.FileUtils.moveFileToDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FilenameUtils.equalsOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.readLines($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.FilenameUtils.getPrefixLength($java.lang.String)
org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL($java.io.File$java.io.File$java.lang.String)
org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger($java.io.File)
org.apache.commons.io.FilenameUtils.concat($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.isIPv6Address($java.lang.String)
org.apache.commons.io.FileUtils.readLines($java.io.File)
org.apache.commons.io.FileUtils.isSymlink($java.io.File)
org.apache.commons.io.FilenameUtils.getExtension($java.lang.String)
org.apache.commons.io.FileUtils.doCopyDirectory($java.io.File$java.io.File$java.io.FileFilter$boolean$java.util.List)
org.apache.commons.io.FileUtils.isFileNewer($java.io.File$java.util.Date)
org.apache.commons.io.FileUtils.cleanDirectoryOnExit($java.io.File)
org.apache.commons.io.FileUtils.copyDirectory($java.io.File$java.io.File$java.io.FileFilter$boolean)
org.apache.commons.io.input.CharacterSetFilterReader.skipSet
org.apache.commons.io.FileUtils.listFilesAndDirs($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FilenameUtils.getName($java.lang.String)
org.apache.commons.io.FileUtils.copyFileToDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.lang.String[])
org.apache.commons.io.FileUtils.contentEquals($java.io.File$java.io.File)
org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$java.nio.charset.Charset)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.sizeOf($java.io.File)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.lang.String$java.util.Collection)
org.apache.commons.io.FileUtils.toFiles($java.net.URL[])
org.apache.commons.io.FilenameUtils.isRFC3986HostName($java.lang.String)
org.apache.commons.io.FileUtils.isFileOlder($java.io.File$long)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$boolean)
org.apache.commons.io.FilenameUtils.IPV6_MAX_HEX_GROUPS
org.apache.commons.io.FileUtils.copyFile($java.io.File$java.io.OutputStream)
org.apache.commons.io.FileUtils.lineIterator($java.io.File$java.lang.String)
org.apache.commons.io.input.CharacterFilterReader.filter($int)
org.apache.commons.io.FileUtils.readFileToString($java.io.File$java.lang.String)
org.apache.commons.io.FileUtils.deleteQuietly($java.io.File)
org.apache.commons.io.FileSystem.<init>($java.lang.String$int$boolean$boolean$int$int$char[]$java.lang.String[])
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$java.lang.String)
org.apache.commons.io.FileUtils.copyInputStreamToFile($java.io.InputStream$java.io.File)
org.apache.commons.io.FileUtils.sizeOf0($java.io.File)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.util.Collection$java.lang.String)
org.apache.commons.io.FileUtils.checksumCRC32($java.io.File)
org.apache.commons.io.FilenameUtils.isIPv4Address($java.lang.String)
org.apache.commons.io.FilenameUtils.indexOfLastSeparator($java.lang.String)
org.apache.commons.io.FilenameUtils.doNormalize($java.lang.String$char$boolean)
org.apache.commons.io.FileUtils.setUpEffectiveFileFilter($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator($java.lang.String)
org.apache.commons.io.FileUtils.cleanDirectory($java.io.File)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.util.Collection$java.lang.String$boolean)
org.apache.commons.io.input.AbstractCharacterFilterReader.read()
org.apache.commons.io.FileUtils.deleteDirectoryOnExit($java.io.File)
org.apache.commons.io.FileUtils.moveToDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FileUtils.copyDirectoryToDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.copyURLToFile($java.net.URL$java.io.File$int$int)
org.apache.commons.io.input.CharacterSetFilterReader.<init>($java.io.Reader$java.util.Set)
org.apache.commons.io.FilenameUtils.REG_NAME_PART_PATTERN
org.apache.commons.io.FilenameUtils.normalize($java.lang.String$boolean)
org.apache.commons.io.FilenameUtils.IPV6_MAX_HEX_DIGITS_PER_GROUP
org.apache.commons.io.FileSystem.getMaxPathLength()
org.apache.commons.io.FilenameUtils.failIfNullBytePresent($java.lang.String)
org.apache.commons.io.FileUtils.decodeUrl($java.lang.String)
org.apache.commons.io.FileSystem.isReservedFileName($java.lang.CharSequence)
org.apache.commons.io.FileSystem.toLegalFileName($java.lang.String$char)
org.apache.commons.io.FileUtils.readFileToString($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.input.CharacterFilterReader.<init>($java.io.Reader$int)
org.apache.commons.io.FileSystem.isIllegalFileNameChar($char)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$boolean)
org.apache.commons.io.FileUtils.copyDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FilenameUtils.IPV4_PATTERN
org.apache.commons.io.FileUtils.readFileToByteArray($java.io.File)
org.apache.commons.io.FileUtils.sizeOfAsBigInteger($java.io.File)
org.apache.commons.io.input.AbstractCharacterFilterReader.filter($int)
org.apache.commons.io.FileUtils.listFiles($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileUtils.deleteDirectory($java.io.File)
org.apache.commons.io.FileSystem.isLegalFileName($java.lang.CharSequence)
org.apache.commons.io.FileUtils.copyToDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileSystem.getReservedFileNames()
org.apache.commons.io.FileUtils.copyToFile($java.io.InputStream$java.io.File)
org.apache.commons.io.FileUtils.readFileToString($java.io.File)
org.apache.commons.io.FileUtils.isFileNewer($java.io.File$long)
org.apache.commons.io.FileUtils.checkDirectory($java.io.File)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.util.Collection$boolean)
org.apache.commons.io.FileUtils.validateListFilesParameters($java.io.File$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileUtils.copyFileToDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$java.lang.String$boolean)
org.apache.commons.io.FileUtils.doCopyFile($java.io.File$java.io.File$boolean)
org.apache.commons.io.FileUtils.listFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.FileUtils.writeByteArrayToFile($java.io.File$byte[])
org.apache.commons.io.FileSystem.getIllegalFileNameChars()
org.apache.commons.io.FileSystem.isCaseSensitive()
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.toSuffixes($java.lang.String[])
org.apache.commons.io.FilenameUtils.getPath($java.lang.String)
org.apache.commons.io.FileUtils.copyDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.checkFileRequirements($java.io.File$java.io.File)
org.apache.commons.io.FileSystem.caseSensitive
org.apache.commons.io.FileUtils.toURLs($java.io.File[])
org.apache.commons.io.FileUtils.verifiedListFiles($java.io.File)
org.apache.commons.io.FileUtils.setUpEffectiveDirFilter($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.lang.String$java.util.Collection$java.lang.String$boolean)
org.apache.commons.io.FilenameUtils.MAX_UNSIGNED_SHORT
org.apache.commons.io.FileSystem.casePreserving
org.apache.commons.io.FilenameUtils.normalize($java.lang.String)
org.apache.commons.io.FileUtils.isFileNewer($java.io.File$java.io.File)
org.apache.commons.io.FilenameUtils.equalsNormalized($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.lang.String$java.util.Collection$boolean)
org.apache.commons.io.FileUtils.moveDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.readLines($java.io.File$java.lang.String)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$java.nio.charset.Charset)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.util.Collection)
org.apache.commons.io.FilenameUtils.getPrefix($java.lang.String)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.doGetFullPath($java.lang.String$boolean)
org.apache.commons.io.FileUtils.forceDeleteOnExit($java.io.File)
org.apache.commons.io.FileUtils.copyFile($java.io.File$java.io.File$boolean)
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterNone()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterFirst()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase$1.<init>($org.apache.commons.io.monitor.FileAlterationMonitorTestCase$java.util.Collection)
org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure()
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterLast()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize0FilterSize1()
org.apache.commons.io.input.CharacterSetFilterReaderTest.<init>()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()
org.apache.commons.io.input.CharacterFilterReaderTest.<init>()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterLast()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.output.TeeOutputStreamTest.testTee()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testStopWhileWaitingForNextInterval()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Big()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize_with_nullbytes()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0FilterSize0()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionVarArgs()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterAll()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterAll()
org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals($java.lang.String$byte[]$byte[])
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase$1.newThread($java.lang.Runnable)
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterFirst()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize1FilterSize1()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0NullFilter()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()
org.apache.commons.io.FilenameUtilsTestCase.testConcat()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterLast()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()
org.apache.commons.io.FilenameUtilsTestCase.<clinit>()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize1FilterSize1()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterFirst()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0FilterSize1()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Small()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.input.Tailer.run()
org.apache.commons.io.FilenameUtils.getFullPath($java.lang.String)
org.apache.commons.io.FileUtils.writeByteArrayToFile($java.io.File$byte[]$int$int)
org.apache.commons.io.FileUtils.isFileOlder($java.io.File$java.io.File)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.util.Collection)
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.FileUtils.sizeOfDirectoryBig0($java.io.File)
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File)
org.apache.commons.io.FileUtils.moveFile($java.io.File$java.io.File)
org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator($java.lang.String$boolean)
org.apache.commons.io.FileUtils.copyFile($java.io.File$java.io.File)
org.apache.commons.io.FilenameUtils.indexOfExtension($java.lang.String)
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.FileSystem.maxFileNameLength
org.apache.commons.io.monitor.FileAlterationMonitor.run()
org.apache.commons.io.FileSystemUtils.freeSpaceKb()
org.apache.commons.io.output.LockableFileWriter.<init>($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.FileUtils.copyDirectory($java.io.File$java.io.File$java.io.FileFilter)
org.apache.commons.io.FileUtils.toFile($java.net.URL)
org.apache.commons.io.FilenameUtils.isValidHostName($java.lang.String)
org.apache.commons.io.input.AbstractCharacterFilterReader.<init>($java.io.Reader)
org.apache.commons.io.input.CharacterSetFilterReader.filter($int)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String$boolean$org.apache.commons.io.IOCase)
org.apache.commons.io.FileUtils.sizeOfDirectory0($java.io.File)
org.apache.commons.io.output.LockableFileWriter.<init>($java.io.File)
org.apache.commons.io.FileSystem.getMaxFileNameLength()
org.apache.commons.io.FileSystem.GENERIC
org.apache.commons.io.output.LockableFileWriter.<init>($java.io.File$boolean)
org.apache.commons.io.FileUtils.innerListFilesOrDirectories($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter$boolean)
org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator($java.lang.String)
org.apache.commons.io.FileUtils.writeByteArrayToFile($java.io.File$byte[]$boolean)
org.apache.commons.io.FileUtils.validateMoveParameters($java.io.File$java.io.File)
org.apache.commons.io.FilenameUtils.getBaseName($java.lang.String)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$java.nio.charset.Charset$boolean)
org.apache.commons.io.output.LockableFileWriter.<init>($java.io.File$java.lang.String)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.lang.String$java.util.Collection$java.lang.String)
org.apache.commons.io.FileUtils.copyURLToFile($java.net.URL$java.io.File)
org.apache.commons.io.output.LockableFileWriter.<init>($java.io.File$java.nio.charset.Charset$boolean$java.lang.String)
org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.AgeFileFilter.accept($java.io.File)
org.apache.commons.io.FileSystem.$VALUES
org.apache.commons.io.FileUtils.sizeOfDirectory($java.io.File)
org.apache.commons.io.input.CharacterSetFilterReader.EMPTY_SET
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.lang.String$java.nio.charset.CharsetEncoder$boolean)
org.apache.commons.io.FileUtils.writeByteArrayToFile($java.io.File$byte[]$int$int$boolean)
org.apache.commons.io.input.CharacterFilterReader.skip
org.apache.commons.io.FileSystem.<clinit>()
org.apache.commons.io.FilenameUtils.getAdsCriticalOffset($java.lang.String)
org.apache.commons.io.filefilter.OrFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.output.ThresholdingOutputStream.write($byte[])
org.apache.commons.io.FileUtils.iterateFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.output.LockableFileWriter.<init>($java.io.File$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.comparator.ExtensionFileComparator.compare($java.io.File$java.io.File)
org.apache.commons.io.FileSystem.MAC_OSX
org.apache.commons.io.FilenameUtils.equalsOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.filterSet($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.FileUtils.readLines($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger($java.io.File)
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.separatorsToSystem($java.lang.String)
org.apache.commons.io.FilenameUtils.isIPv6Address($java.lang.String)
org.apache.commons.io.FileUtils.ONE_KB_BI
org.apache.commons.io.FileUtils.isSymlink($java.io.File)
org.apache.commons.io.FileUtils.isFileNewer($java.io.File$java.util.Date)
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.lang.String$java.nio.charset.CharsetEncoder)
org.apache.commons.io.FileUtils.copyDirectory($java.io.File$java.io.File$java.io.FileFilter$boolean)
org.apache.commons.io.input.CharacterSetFilterReader.skipSet
org.apache.commons.io.FileUtils.listFilesAndDirs($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileSystemUtils.freeSpace($java.lang.String)
org.apache.commons.io.serialization.ValidatingObjectInputStream.validateClassName($java.lang.String)
org.apache.commons.io.FilenameUtils.getName($java.lang.String)
org.apache.commons.io.FileUtils.copyFileToDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FileSystem.OS_NAME
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.io.File$java.lang.String$boolean)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.lang.String[])
org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$java.nio.charset.Charset)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.sizeOf($java.io.File)
org.apache.commons.io.FileUtils.isFileOlder($java.io.File$long)
org.apache.commons.io.output.FileWriterWithEncoding.initWriter($java.io.File$java.lang.Object$boolean)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$boolean)
org.apache.commons.io.FileSystem.IS_OS_MAC
org.apache.commons.io.FileCleaningTracker$Tracker.delete()
org.apache.commons.io.FileSystem.reservedFileNames
org.apache.commons.io.FileUtils.readFileToString($java.io.File$java.lang.String)
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.io.File$java.nio.charset.Charset$boolean)
org.apache.commons.io.FileDeleteStrategy.delete($java.io.File)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$java.lang.String)
org.apache.commons.io.FileUtils.copyInputStreamToFile($java.io.InputStream$java.io.File)
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.util.Collection$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable$java.util.Collection)
org.apache.commons.io.FilenameUtils.doNormalize($java.lang.String$char$boolean)
org.apache.commons.io.FileUtils.setUpEffectiveFileFilter($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator($java.lang.String)
org.apache.commons.io.FileUtils.cleanDirectory($java.io.File)
org.apache.commons.io.comparator.SizeFileComparator.compare($java.io.File$java.io.File)
org.apache.commons.io.input.AbstractCharacterFilterReader.read()
org.apache.commons.io.FileUtils.copyDirectoryToDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.ONE_PB_BI
org.apache.commons.io.input.CharacterSetFilterReader.<init>($java.io.Reader$java.util.Set)
org.apache.commons.io.FilenameUtils.normalize($java.lang.String$boolean)
org.apache.commons.io.FilenameUtils.REG_NAME_PART_PATTERN
org.apache.commons.io.FileUtils.ONE_GB_BI
org.apache.commons.io.FilenameUtils.IPV6_MAX_HEX_DIGITS_PER_GROUP
org.apache.commons.io.FilenameUtils.failIfNullBytePresent($java.lang.String)
org.apache.commons.io.FileSystem.toLegalFileName($java.lang.String$char)
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify($org.apache.commons.io.monitor.FileEntry$org.apache.commons.io.monitor.FileEntry[]$java.io.File[])
org.apache.commons.io.FileSystem.isIllegalFileNameChar($char)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$boolean)
org.apache.commons.io.FileUtils.copyDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FilenameUtils.IPV4_PATTERN
org.apache.commons.io.FileUtils.readFileToByteArray($java.io.File)
org.apache.commons.io.FileUtils.sizeOfAsBigInteger($java.io.File)
org.apache.commons.io.FileUtils.listFiles($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileSystem.maxPathLength
org.apache.commons.io.FileUtils.copyToFile($java.io.InputStream$java.io.File)
org.apache.commons.io.FileUtils.readFileToString($java.io.File)
org.apache.commons.io.FileUtils.isFileNewer($java.io.File$long)
org.apache.commons.io.FileUtils.checkDirectory($java.io.File)
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FileUtils.validateListFilesParameters($java.io.File$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileSystem.IS_OS_LINUX
org.apache.commons.io.FileSystemUtils.freeSpaceWindows($java.lang.String$long)
org.apache.commons.io.FileUtils.doCopyFile($java.io.File$java.io.File$boolean)
org.apache.commons.io.monitor.FileAlterationMonitor.running
org.apache.commons.io.FileSystem.getIllegalFileNameChars()
org.apache.commons.io.FileSystem.isCaseSensitive()
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.toSuffixes($java.lang.String[])
org.apache.commons.io.FileSystem.LINUX
org.apache.commons.io.FileUtils.copyDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.checkFileRequirements($java.io.File$java.io.File)
org.apache.commons.io.FileSystem.getOsMatchesName($java.lang.String)
org.apache.commons.io.FileSystem.caseSensitive
org.apache.commons.io.FileUtils.toURLs($java.io.File[])
org.apache.commons.io.FileUtils.verifiedListFiles($java.io.File)
org.apache.commons.io.FileUtils.setUpEffectiveDirFilter($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FilenameUtils.MAX_UNSIGNED_SHORT
org.apache.commons.io.monitor.FileAlterationObserver.doListFiles($java.io.File$org.apache.commons.io.monitor.FileEntry)
org.apache.commons.io.FileSystem.casePreserving
org.apache.commons.io.FilenameUtils.equalsNormalized($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.OrFileFilter.accept($java.io.File)
org.apache.commons.io.FileUtils.readLines($java.io.File$java.lang.String)
org.apache.commons.io.FileSystemUtils.freeSpaceKb($java.lang.String)
org.apache.commons.io.FileDeleteStrategy$ForceFileDeleteStrategy.doDelete($java.io.File)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.util.Collection)
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()
org.apache.commons.io.FilenameUtils.getPrefix($java.lang.String)
org.apache.commons.io.FileSystemUtils.freeSpaceKb($java.lang.String$long)
org.apache.commons.io.FileUtils.forceDeleteOnExit($java.io.File)
org.apache.commons.io.serialization.ValidatingObjectInputStream.resolveClass($java.io.ObjectStreamClass)
org.apache.commons.io.FileSystem.getCurrent()
org.apache.commons.io.FileUtils.ONE_MB_BI
org.apache.commons.io.input.AbstractCharacterFilterReader.read($char[]$int$int)
org.apache.commons.io.serialization.WildcardClassNameMatcher.matches($java.lang.String)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.filterList($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.FileUtils.waitFor($java.io.File$int)
org.apache.commons.io.FileUtils.lineIterator($java.io.File)
org.apache.commons.io.FilenameUtils.getPathNoEndSeparator($java.lang.String)
org.apache.commons.io.FilenameUtils.isSystemWindows()
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$java.nio.charset.Charset$boolean)
org.apache.commons.io.FilenameUtils.removeExtension($java.lang.String)
org.apache.commons.io.FileUtils.copyToDirectory($java.lang.Iterable$java.io.File)
org.apache.commons.io.FileUtils.directoryContains($java.io.File$java.io.File)
org.apache.commons.io.FilenameUtils.doGetPath($java.lang.String$int)
org.apache.commons.io.output.ThresholdingOutputStream.write($int)
org.apache.commons.io.FileUtils.moveDirectoryToDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.monitor.FileAlterationObserver.listFiles($java.io.File)
org.apache.commons.io.output.LockableFileWriter.initWriter($java.io.File$java.nio.charset.Charset$boolean)
org.apache.commons.io.monitor.FileAlterationMonitor.stop($long)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$java.lang.String$boolean)
org.apache.commons.io.output.LockableFileWriter.<init>($java.lang.String)
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.io.File$java.lang.String)
org.apache.commons.io.FileUtils.forceMkdir($java.io.File)
org.apache.commons.io.FileUtils.ONE_YB
org.apache.commons.io.FileUtils.checksum($java.io.File$java.util.zip.Checksum)
org.apache.commons.io.FileUtils.forceMkdirParent($java.io.File)
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FileSystem.isOsNameMatch($java.lang.String$java.lang.String)
org.apache.commons.io.FileSystem.IS_OS_WINDOWS
org.apache.commons.io.FileUtils.iterateFilesAndDirs($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FilenameUtils.BASE_16
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.lang.String$java.nio.charset.Charset$boolean)
org.apache.commons.io.FileUtils.sizeOfBig0($java.io.File)
org.apache.commons.io.FileUtils.isFileOlder($java.io.File$java.util.Date)
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.lang.String$java.nio.charset.Charset)
org.apache.commons.io.FileSystem.illegalFileNameChars
org.apache.commons.io.FileUtils.forceDelete($java.io.File)
org.apache.commons.io.FileUtils.iterateFiles($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileSystem.isCasePreserving()
org.apache.commons.io.input.CharacterSetFilterReader.<clinit>()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.monitor.FileAlterationObserver.createFileEntry($org.apache.commons.io.monitor.FileEntry$java.io.File)
org.apache.commons.io.FilenameUtils.IPV4_MAX_OCTET_VALUE
org.apache.commons.io.FileUtils.moveFileToDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FileUtils.ONE_ZB
org.apache.commons.io.FilenameUtils.getPrefixLength($java.lang.String)
org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL($java.io.File$java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.concat($java.lang.String$java.lang.String)
org.apache.commons.io.FileUtils.readLines($java.io.File)
org.apache.commons.io.FilenameUtils.getExtension($java.lang.String)
org.apache.commons.io.FileUtils.doCopyDirectory($java.io.File$java.io.File$java.io.FileFilter$boolean$java.util.List)
org.apache.commons.io.FileUtils.cleanDirectoryOnExit($java.io.File)
org.apache.commons.io.FileUtils.ONE_TB_BI
org.apache.commons.io.output.LockableFileWriter.<init>($java.io.File$boolean$java.lang.String)
org.apache.commons.io.monitor.FileAlterationMonitor.start()
org.apache.commons.io.FileUtils.contentEquals($java.io.File$java.io.File)
org.apache.commons.io.FileSystemUtils.freeSpaceOS($java.lang.String$int$boolean$long)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.lang.String$java.util.Collection)
org.apache.commons.io.FileUtils.toFiles($java.net.URL[])
org.apache.commons.io.FilenameUtils.isRFC3986HostName($java.lang.String)
org.apache.commons.io.FilenameUtils.IPV6_MAX_HEX_GROUPS
org.apache.commons.io.FileSystem.WINDOWS
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File)
org.apache.commons.io.FileUtils.copyFile($java.io.File$java.io.OutputStream)
org.apache.commons.io.FileUtils.lineIterator($java.io.File$java.lang.String)
org.apache.commons.io.comparator.ExtensionFileComparator.compare($java.lang.Object$java.lang.Object)
org.apache.commons.io.FileUtils.byteCountToDisplaySize($long)
org.apache.commons.io.input.CharacterFilterReader.filter($int)
org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold($int)
org.apache.commons.io.FileUtils.deleteQuietly($java.io.File)
org.apache.commons.io.FileSystem.<init>($java.lang.String$int$boolean$boolean$int$int$char[]$java.lang.String[])
org.apache.commons.io.comparator.SizeFileComparator.compare($java.lang.Object$java.lang.Object)
org.apache.commons.io.FileUtils.sizeOf0($java.io.File)
org.apache.commons.io.FileSystemUtils.freeSpaceKb($long)
org.apache.commons.io.FileUtils.checksumCRC32($java.io.File)
org.apache.commons.io.FilenameUtils.isIPv4Address($java.lang.String)
org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR
org.apache.commons.io.IOCase.<clinit>()
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.indexOfLastSeparator($java.lang.String)
org.apache.commons.io.output.LockableFileWriter.<init>($java.lang.String$boolean$java.lang.String)
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.io.File$java.nio.charset.CharsetEncoder)
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.util.Collection$java.lang.String$boolean)
org.apache.commons.io.FileUtils.deleteDirectoryOnExit($java.io.File)
org.apache.commons.io.FileUtils.ONE_EB_BI
org.apache.commons.io.FileUtils.moveToDirectory($java.io.File$java.io.File$boolean)
org.apache.commons.io.FileUtils.copyURLToFile($java.net.URL$java.io.File$int$int)
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File)
org.apache.commons.io.FileSystem.getMaxPathLength()
org.apache.commons.io.FileUtils.decodeUrl($java.lang.String)
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.io.File$java.nio.charset.CharsetEncoder$boolean)
org.apache.commons.io.FileSystem.isReservedFileName($java.lang.CharSequence)
org.apache.commons.io.FileUtils.readFileToString($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.filefilter.FileFilterUtils.filterList($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.output.FileWriterWithEncoding.<init>($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FileUtils.byteCountToDisplaySize($java.math.BigInteger)
org.apache.commons.io.input.CharacterFilterReader.<init>($java.io.Reader$int)
org.apache.commons.io.FileDeleteStrategy.deleteQuietly($java.io.File)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.AbstractCharacterFilterReader.filter($int)
org.apache.commons.io.FileUtils.deleteDirectory($java.io.File)
org.apache.commons.io.FileSystem.isLegalFileName($java.lang.CharSequence)
org.apache.commons.io.FileUtils.copyToDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileSystem.getReservedFileNames()
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.util.Collection$boolean)
org.apache.commons.io.FileUtils.copyFileToDirectory($java.io.File$java.io.File)
org.apache.commons.io.FileUtils.writeStringToFile($java.io.File$java.lang.String$java.lang.String$boolean)
org.apache.commons.io.FileUtils.listFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.FileUtils.writeByteArrayToFile($java.io.File$byte[])
org.apache.commons.io.output.LockableFileWriter.<init>($java.lang.String$boolean)
org.apache.commons.io.monitor.FileAlterationMonitor.stop()
org.apache.commons.io.filefilter.FileFilterUtils.filterSet($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR_STR
org.apache.commons.io.FilenameUtils.getPath($java.lang.String)
org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.lang.String$java.util.Collection$java.lang.String$boolean)
org.apache.commons.io.monitor.FileAlterationObserver.initialize()
org.apache.commons.io.FilenameUtils.normalize($java.lang.String)
org.apache.commons.io.FileCleaningTracker$Reaper.run()
org.apache.commons.io.FileUtils.isFileNewer($java.io.File$java.io.File)
org.apache.commons.io.FileSystem.values()
org.apache.commons.io.FileUtils.writeLines($java.io.File$java.lang.String$java.util.Collection$boolean)
org.apache.commons.io.FileUtils.moveDirectory($java.io.File$java.io.File)
org.apache.commons.io.output.ThresholdingOutputStream.write($byte[]$int$int)
org.apache.commons.io.FileUtils.write($java.io.File$java.lang.CharSequence$java.nio.charset.Charset)
org.apache.commons.io.FilenameUtils.isExtension($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR
org.apache.commons.io.FilenameUtils.doGetFullPath($java.lang.String$boolean)
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File)
org.apache.commons.io.FileUtils.copyFile($java.io.File$java.io.File$boolean)
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.testChecksumDouble()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase$1.<init>($org.apache.commons.io.monitor.FileAlterationMonitorTestCase$java.util.Collection)
org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()
org.apache.commons.io.LineIteratorTestCase.testOneLines()
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()
org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainsDirectory()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize0FilterSize1()
org.apache.commons.io.output.TeeOutputStreamTest.testTee()
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()
org.apache.commons.io.FileUtilsWaitForTestCase.testWaitFor()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()
org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()
org.apache.commons.io.monitor.FilesystemObserverTestCase.testDirectory()
org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegex()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()
org.apache.commons.io.FileUtilsTestCase.testDecodeUrlLenient()
org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()
org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteQuietlyNormal()
org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterFirst()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testMonitor()
org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile()
org.apache.commons.io.output.FileWriterWithEncodingTest.constructor_File_nullFile()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0NullFilter()
org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer($java.lang.String$java.io.File$long$boolean)
org.apache.commons.io.monitor.FileAlterationObserverTestCase.testObserveSingleFile()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()
org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.LineIteratorTestCase.testThreeLines()
org.apache.commons.io.FileSystemTestCase.testToLegalFileNameWindows()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterNone()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterFirst()
org.apache.commons.io.LineIteratorTestCase.testValidEncoding()
org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNormal()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()
org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()
org.apache.commons.io.FileUtilsTestCase.testToFiles4()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterLast()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()
org.apache.commons.io.output.FileWriterWithEncodingTest.sameEncoding_string_Charset_constructor()
org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()
org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1()
org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()
org.apache.commons.io.monitor.AbstractMonitorTestCase.createObserver($java.io.File$java.io.FileFilter)
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotExist()
org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()
org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()
org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory($java.io.File$java.io.File$java.io.File)
org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()
org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()
org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFileSourceDoesNotExist()
org.apache.commons.io.output.FileWriterWithEncodingTest.sameEncoding_null_Charset_constructor()
org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()
org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.FileUtilsTestCase.testCopyFileLarge()
org.apache.commons.io.FileUtilsTestCase.testChecksum()
org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesNested()
org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.createCircularSymLink($java.io.File)
org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_encoding_badEncoding()
org.apache.commons.io.FileUtilsTestCase.testChecksumOnDirectory()
org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize1FilterSize1()
org.apache.commons.io.LineIteratorTestCase.testInvalidEncoding()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()
org.apache.commons.io.LineIteratorTestCase.testMissingFile()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterLast()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()
org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()
org.apache.commons.io.FilenameUtilsTestCase.<clinit>()
org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()
org.apache.commons.io.FileUtilsTestCase.testToURLs1()
org.apache.commons.io.FileUtilsTestCase.testForceMkdir()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()
org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()
org.apache.commons.io.output.LockableFileWriterTest.testFileNotLocked()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()
org.apache.commons.io.FileUtilsTestCase.testToFile5()
org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()
org.apache.commons.io.input.CharacterFilterReaderTest.<init>()
org.apache.commons.io.output.LockableFileWriterTest.testAlternateLockDir()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExist()
org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileSystemTestCase.testSorted()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()
org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()
org.apache.commons.io.LineIteratorTestCase.testNextOnly()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Big()
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()
org.apache.commons.io.FileUtilsTestCase.testIO300()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize_with_nullbytes()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0FilterSize0()
org.apache.commons.io.comparator.SizeFileComparatorTest.testNonexistantFile()
org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()
org.apache.commons.io.serialization.WildcardClassNameMatcherTest.noPattern()
org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileDelete()
org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_directory()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterAll()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()
org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()
org.apache.commons.io.FileUtilsWaitForTestCase$1.run()
org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterableSourceIsNull()
org.apache.commons.io.LineIteratorTestCase.testFilteringFileReader()
org.apache.commons.io.FileUtilsTestCase.testToFileUtf8()
org.apache.commons.io.FileUtilsTestCase.testForceMkdirParent()
org.apache.commons.io.FileUtilsListFilesTestCase.testIterateFilesByExtension()
org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()
org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3()
org.apache.commons.io.FileUtilsTestCase.testDecodeUrlNullSafe()
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()
org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterable()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()
org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile()
org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0FilterSize1()
org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.testDirectory()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize()
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()
org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()
org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()
org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()
org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()
org.apache.commons.io.FileUtilsTestCase.testToFile3()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterLast()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.filefilter.FileFilterTestCase.testNot()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()
org.apache.commons.io.FileUtilsTestCase.testListFiles()
org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteForce()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileUpdate()
org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()
org.apache.commons.io.LineIteratorTestCase.createLinesFile($java.io.File$int)
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.output.FileWriterWithEncodingTest.constructor_File_directory()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionVarArgs()
org.apache.commons.io.FileUtilsTestCase.setUp()
org.apache.commons.io.serialization.RegexpClassNameMatcherTest.testSimplePatternFromPattern()
org.apache.commons.io.output.FileWriterWithEncodingTest.sameEncoding_string_constructor()
org.apache.commons.io.FileUtilsTestCase.testToFile4()
org.apache.commons.io.FileUtilsTestCase.testContentEquals()
org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()
org.apache.commons.io.output.FileWriterWithEncodingTest.constructor_File_encoding_badEncoding()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()
org.apache.commons.io.FileUtilsTestCase.testCompareSizeOf()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()
org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkFile()
org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFileSourceIsNull()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()
org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()
org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength()
org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()
org.apache.commons.io.LineIteratorTestCase.createLinesFile($java.io.File$java.lang.String$int)
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()
org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.FileUtilsTestCase.testFileUtils()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize1FilterSize1()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExistBug()
org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks()
org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()
org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors()
org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerImaginaryFile()
org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes()
org.apache.commons.io.FileUtilsTestCase.testToFile1()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()
org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithDirectory()
org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.serialization.WildcardClassNameMatcherTest.star()
org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testThreadFactory()
org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithDefaultEncoding()
org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesBrokenSymlinkFile()
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()
org.apache.commons.io.serialization.WildcardClassNameMatcherTest.starAndQuestionMark()
org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.serialization.RegexpClassNameMatcherTest.testSimplePatternFromString()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterAll()
org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()
org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer()
org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase$1.newThread($java.lang.Runnable)
org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir()
org.apache.commons.io.FileUtilsTestCase.testToFile2()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()
org.apache.commons.io.FileUtilsTestCase.testIncorrectOutputSize()
org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2()
org.apache.commons.io.LineIteratorTestCase.testZeroLines()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FileSystemTestCase.testIsReservedFileName()
org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir()
org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkDir()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterFirst()
org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()
org.apache.commons.io.comparator.ComparatorAbstractTestCase.testComparator()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testUnrealizedContainment()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()
org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()
org.apache.commons.io.FileUtilsTestCase.testIterateFiles()
org.apache.commons.io.LineIteratorTestCase.testCloseEarly()
org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.testDeleteDirectoryWithNonDirectory()
org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()
org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyDefaultEncoding()
org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()
org.apache.commons.io.output.FileWriterWithEncodingTest.sameEncoding_string_CharsetEncoder_constructor()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()
org.apache.commons.io.input.CharacterSetFilterReaderTest.<init>()
org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileSystemTestCase.testIsLegalName()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()
org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines($int)
org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()
org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testDeletesRegular()
org.apache.commons.io.FileUtilsTestCase.testDecodeUrlEncodingUtf8()
org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testCleanEmpty()
org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile3()
org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterableSourceDoesNotExist()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryDoesNotContainFile()
org.apache.commons.io.output.LockableFileWriterTest.testConstructor_fileName_nullFile()
org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCorrectlyIdentifySymlinkWithParentSymLink()
org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFile()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.FileUtilsTestCase.testCopyToSelf()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testCanonicalPath()
org.apache.commons.io.testtools.TestUtils.newFile($java.io.File$java.lang.String)
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testSameFile()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileCreate()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()
org.apache.commons.io.IOUtilsTestCase.testStringToOutputStream()
org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testConcat()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Small()
org.apache.commons.io.output.FileWriterWithEncodingTest.sameEncoding_string_string_constructor()
org.apache.commons.io.monitor.FilesystemObserverTestCase.setUp()
org.apache.commons.io.output.LockableFileWriterTest.testConstructor_File_nullFile()
org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyNonExistent()
org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()
org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors()
org.apache.commons.io.FileUtilsTestCase.testToFiles2()
org.apache.commons.io.input.TailerTest.testTailer()
org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()
org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()
org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum()
org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.output.LockableFileWriterTest.testFileLocked()
org.apache.commons.io.output.FileWriterWithEncodingTest.constructor_fileName_nullFile()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testStopWhileWaitingForNextInterval()
org.apache.commons.io.monitor.FileSystemMonitorTestCase.setUp()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()
org.apache.commons.io.FileUtilsTestCase.testDecodeUrl()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.output.ThresholdingOutputStreamTest.testSetByteCount()
org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyUtf8Encoding()
org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()
org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()
org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()
org.apache.commons.io.FileUtilsTestCase.testToFiles3()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()
org.apache.commons.io.LineIteratorTestCase.testTwoLines()
org.apache.commons.io.serialization.RegexpClassNameMatcherTest.testOrPattern()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()
org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()
org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyForNull()
org.apache.commons.io.FileUtilsTestCase.testToFiles3a()
org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir()
org.apache.commons.io.FileUtilsTestCase.testReadLines()
org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testIO466()
org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()
org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()
org.apache.commons.io.FileUtilsTestCase.testToURLs3a()
org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()
org.apache.commons.io.FileUtilsTestCase.testIO276()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.FileUtilsTestCase.testCopyFile2()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()
org.apache.commons.io.output.FileWriterWithEncodingTest.sameEncoding_CharsetEncoder_constructor()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()
org.apache.commons.io.monitor.AbstractMonitorTestCase.setUp()
org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()
org.apache.commons.io.output.FileWriterWithEncodingTest.sameEncoding_Charset_constructor()
org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()
org.apache.commons.io.LineIteratorTestCase.testFilteringBufferedReader()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.testFileDelete()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()
org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullFile()
org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()
org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors()
org.apache.commons.io.filefilter.FileFilterTestCase.testOr()
org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals($java.lang.String$byte[]$byte[])
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()
org.apache.commons.io.LineIteratorTestCase.setUp()
org.apache.commons.io.LineIteratorTestCase.testNextLineOnlyNullEncoding()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()
org.apache.commons.io.FileUtilsTestCase.testSizeOf()
org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32()
org.apache.commons.io.FileUtilsTestCase.testToFiles1()
org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithEncoding()
org.apache.commons.io.FileSystemTestCase.testReplacementWithNUL()
org.apache.commons.io.FileUtilsTestCase.testCopyFile1()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()
org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory()
org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()
org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNull()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()
org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()
org.apache.commons.io.monitor.FilesystemObserverTestCase.testObserveSingleFile()
org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()
org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding()
