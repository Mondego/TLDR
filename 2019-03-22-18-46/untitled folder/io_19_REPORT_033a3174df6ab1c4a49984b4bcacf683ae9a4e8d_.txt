NUMBER OF NEW OR CHANGED ENTITIES : 11
NUMBER OF NEW OR CHANGED TESTS : 18
NUMBER OF ENTITY TO TEST : 35
NUMBER OF TEST TO RUN : 53
TOTAL TIME REQUIRED : 0.674674731 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.FileUtils.listFiles($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.input.CharSequenceInputStream.read($byte[]$int$int)
org.apache.commons.io.FileUtils.setUpEffectiveFileFilter($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileUtils.setUpEffectiveDirFilter($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.getXmlProlog($java.io.InputStream$java.lang.String)
org.apache.commons.io.input.ReaderInputStream.read($byte[]$int$int)
org.apache.commons.io.FileUtils.listFilesAndDirs($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZeroEmptyString()
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip()
org.apache.commons.io.input.ReaderInputStreamTest.testReadZero()
org.apache.commons.io.input.CharSequenceInputStreamTest.testWithSingleByteRead($java.lang.String$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeUTF8WithSingleByteRead()
org.apache.commons.io.input.ReaderInputStreamTest.testCharsetMismatchInfiniteLoop()
org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString()
org.apache.commons.io.input.ReaderInputStreamTest.<clinit>()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()
org.apache.commons.io.input.CharSequenceInputStreamTest.testWithBufferedRead($java.lang.String$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF8WithBufferedRead()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeUTF8WithBufferedRead()
org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF8WithSingleByteRead()
org.apache.commons.io.input.CharSequenceInputStreamTest.<clinit>()
org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF16WithSingleByteRead()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.input.XmlStreamReader.<init>($java.io.File)
org.apache.commons.io.FileUtils.listFiles($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.input.ReaderInputStream.read($byte[])
org.apache.commons.io.FileUtils.iterateFilesAndDirs($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream)
org.apache.commons.io.input.XmlStreamReader.BOMS
org.apache.commons.io.input.CharSequenceInputStream.read($byte[])
org.apache.commons.io.input.XmlStreamReader.CHARSET_PATTERN
org.apache.commons.io.input.XmlStreamReader.doRawStream($org.apache.commons.io.input.BOMInputStream$org.apache.commons.io.input.BOMInputStream$boolean)
org.apache.commons.io.FileUtils.iterateFiles($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URLConnection$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.output.XmlStreamWriter.<clinit>()
org.apache.commons.io.FileUtils.listFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.FileUtils.iterateFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean)
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URL)
org.apache.commons.io.input.XmlStreamReader.doHttpStream($org.apache.commons.io.input.BOMInputStream$org.apache.commons.io.input.BOMInputStream$java.lang.String$boolean)
org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean)
org.apache.commons.io.input.CharSequenceInputStream.read($byte[]$int$int)
org.apache.commons.io.FileUtils.setUpEffectiveFileFilter($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.FileUtils.setUpEffectiveDirFilter($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.input.XmlStreamReader.getXmlProlog($java.io.InputStream$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.ReaderInputStream.read($byte[]$int$int)
org.apache.commons.io.input.XmlStreamReader.doLenientDetection($java.lang.String$org.apache.commons.io.input.XmlStreamReaderException)
org.apache.commons.io.FileUtils.listFilesAndDirs($java.io.File$org.apache.commons.io.filefilter.IOFileFilter$org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.XML_GUESS_BYTES
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.ENCODING_PATTERN
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkTextXml($boolean$java.lang.String)
org.apache.commons.io.FileUtilsTestCase.testIterateFiles()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeEncoding()
org.apache.commons.io.input.CharSequenceInputStreamTest.testWithSingleByteRead($java.lang.String$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkReset()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeUTF8WithSingleByteRead()
org.apache.commons.io.input.ReaderInputStreamTest.testCharsetMismatchInfiniteLoop()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.ReaderInputStreamTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()
org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF8WithSingleByteRead()
org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF16WithSingleByteRead()
org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testSkip()
org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()
org.apache.commons.io.input.ReaderInputStreamTest.testReadZero()
org.apache.commons.io.FileUtilsTestCase.testListFiles()
org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString()
org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeEncoding($java.lang.String$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testUTF8WithBufferedRead()
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader.<init>($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testTextXml()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBom()
org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZeroEmptyString()
org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBom()
org.apache.commons.io.input.CharSequenceInputStreamTest.testLargeUTF8WithBufferedRead()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FileUtilsListFilesTestCase.testIterateFilesByExtension()
org.apache.commons.io.input.ReaderInputStreamTest.testLargeUTF8WithBufferedRead()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop()
org.apache.commons.io.input.ReaderInputStreamTest.testUTF8WithBufferedRead()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkAppXml($boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.testWithBufferedRead($java.lang.String$java.lang.String)
org.apache.commons.io.input.ReaderInputStreamTest.testWithBufferedRead($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testAppXml()
org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.CharSequenceInputStreamTest.<clinit>()
