NUMBER OF NEW OR CHANGED ENTITIES : 7
NUMBER OF NEW OR CHANGED TESTS : 12
NUMBER OF ENTITY TO TEST : 67
NUMBER OF TEST TO RUN : 67
TOTAL TIME REQUIRED : 0.679413131 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.IOCase.checkCompareTo($java.lang.String$java.lang.String)
org.apache.commons.io.IOCase.checkRegionMatches($java.lang.String$int$java.lang.String)
org.apache.commons.io.IOCase.checkEndsWith($java.lang.String$java.lang.String)
org.apache.commons.io.IOCase.convertCase($java.lang.String)
org.apache.commons.io.IOCase.checkEquals($java.lang.String$java.lang.String)
org.apache.commons.io.IOCase.checkStartsWith($java.lang.String$java.lang.String)
org.apache.commons.io.IOCase.<clinit>()
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()
org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()
org.apache.commons.io.IOCaseTestCase.<clinit>()
org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()
org.apache.commons.io.IOCaseTestCase.serialize($org.apache.commons.io.IOCase)
org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()
org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_functionality()
org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_functionality()
org.apache.commons.io.IOCaseTestCase.test_checkCompare_functionality()
org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_functionality()
org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()
org.apache.commons.io.IOCaseTestCase.test_checkEquals_functionality()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.IOCase.SYSTEM
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File)
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.lang.String)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.PrefixFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.SuffixFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File)
org.apache.commons.io.IOCase.<clinit>()
org.apache.commons.io.IOCase.checkRegionMatches($java.lang.String$int$java.lang.String)
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware($org.apache.commons.io.filefilter.IOFileFilter)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String$boolean$org.apache.commons.io.IOCase)
org.apache.commons.io.IOCase.forName($java.lang.String)
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.util.List)
org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter($java.lang.String)
org.apache.commons.io.IOCase.checkStartsWith($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter($java.lang.String)
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.util.List)
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.lang.String)
org.apache.commons.io.filefilter.PrefixFileFilter.accept($java.io.File)
org.apache.commons.io.IOCase.convertCase($java.lang.String)
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.IOCase.SENSITIVE
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter($java.lang.String)
org.apache.commons.io.IOCase.checkCompareTo($java.lang.String$java.lang.String)
org.apache.commons.io.IOCase.checkEndsWith($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.SuffixFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.FileUtils.listFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.FileUtils.iterateFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.IOCase.checkEquals($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.equalsOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.lang.String[])
org.apache.commons.io.IOCase.INSENSITIVE
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List)
org.apache.commons.io.FilenameUtils.equalsNormalized($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.IOCase.readResolve()
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.lang.String[])
org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.lang.String)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.util.List)
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()
org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()
org.apache.commons.io.FileUtilsTestCase.testIterateFiles()
org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()
org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()
org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()
org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()
org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_functionality()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()
org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()
org.apache.commons.io.filefilter.FileFilterTestCase.testNot()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.IOCaseTestCase.test_checkEquals_functionality()
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()
org.apache.commons.io.IOCaseTestCase.test_checkCompare_case()
org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()
org.apache.commons.io.IOCaseTestCase.<clinit>()
org.apache.commons.io.FileUtilsTestCase.testListFiles()
org.apache.commons.io.filefilter.FileFilterTestCase.testRegex()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()
org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()
org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()
org.apache.commons.io.IOCaseTestCase.test_serialization()
org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()
org.apache.commons.io.filefilter.FileFilterTestCase.testOr()
org.apache.commons.io.IOCaseTestCase.serialize($org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()
org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()
org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()
org.apache.commons.io.IOCaseTestCase.test_checkCompare_functionality()
org.apache.commons.io.IOCaseTestCase.test_toString()
org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()
org.apache.commons.io.DirectoryWalkerTestCase.<clinit>()
org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()
org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter($java.io.File[])
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()
org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()
org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_functionality()
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.IOCaseTestCase.test_forName()
org.apache.commons.io.IOCaseTestCase.test_getName()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()
org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_functionality()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()
