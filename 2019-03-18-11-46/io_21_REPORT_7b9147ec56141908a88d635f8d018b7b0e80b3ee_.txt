NUMBER OF NEW OR CHANGED ENTITIES : 25
NUMBER OF NEW OR CHANGED TESTS : 26
NUMBER OF ENTITY TO TEST : 56
NUMBER OF TEST TO RUN : 47
TOTAL TIME REQUIRED : 0.736625432 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.input.Tailer.run()
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.MagicNumberFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.HexDump.<clinit>()
org.apache.commons.io.filefilter.WildcardFileFilter.toString()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.input.Tailer.readLines($java.io.RandomAccessFile)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String)
org.apache.commons.io.IOUtils.<clinit>()
org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>($java.lang.String$long)
org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>($byte[]$long)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.input.Tailer.stop($java.lang.Exception)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.FileUtils.decodeUrl($java.lang.String)
org.apache.commons.io.FileSystemUtils.<clinit>()
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.output.ByteArrayOutputStream.toString()
org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()
org.apache.commons.io.output.ByteArrayOutputStream.toString($java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.input.TailerTest.testMultiByteBreak()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.hashCode()
org.apache.commons.io.input.TailerTest.testTailerEof()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals($java.lang.Object[]$java.lang.Object[])
org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equalObject($java.lang.Object)
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()
org.apache.commons.io.FilenameUtilsWildcardTestCase.<clinit>()
org.apache.commons.io.input.TailerTest.createFile($java.io.File$long)
org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testPrimitiveLong()
org.apache.commons.io.input.TailerTest.testTailer()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject1()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E.<init>($java.lang.String$int)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject2()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testLong()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()
org.apache.commons.io.input.TailerTest.testInterrupt()
org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E.<clinit>()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals($java.lang.Object)
org.apache.commons.io.input.TailerTest.testIO335()
org.apache.commons.io.input.TailerTest.testStopWithNoFile()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.input.Tailer.run()
org.apache.commons.io.FileUtils.ONE_MB_BI
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.MagicNumberFileFilter.magicNumbers
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.HexDump.<clinit>()
org.apache.commons.io.filefilter.WildcardFileFilter.toString()
org.apache.commons.io.HexDump._hexcodes
org.apache.commons.io.FilenameUtils.isSystemWindows()
org.apache.commons.io.monitor.FileAlterationMonitor.run()
org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR
org.apache.commons.io.IOCase.<clinit>()
org.apache.commons.io.input.Tailer.readLines($java.io.RandomAccessFile)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String)
org.apache.commons.io.IOUtils.<clinit>()
org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>($java.lang.String$long)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.filefilter.MagicNumberFileFilter.byteOffset
org.apache.commons.io.input.Tailer.stop($java.lang.Exception)
org.apache.commons.io.FileUtils.ONE_EB_BI
org.apache.commons.io.FileUtils.ONE_PB_BI
org.apache.commons.io.FileUtils.ONE_GB_BI
org.apache.commons.io.monitor.FileAlterationObserver.listFiles($java.io.File)
org.apache.commons.io.FileUtils.decodeUrl($java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.caseSensitivity
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.FileSystemUtils.OS
org.apache.commons.io.FileUtils.ONE_YB
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify($org.apache.commons.io.monitor.FileEntry$org.apache.commons.io.monitor.FileEntry[]$java.io.File[])
org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()
org.apache.commons.io.output.ByteArrayOutputStream.toString($java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.HexDump._shifts
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.FileUtils.UTF8
org.apache.commons.io.filefilter.MagicNumberFileFilter.accept($java.io.File)
org.apache.commons.io.FileSystemUtils.DF
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FileSystemUtils.INSTANCE
org.apache.commons.io.FileUtils.ONE_ZB
org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR_STR
org.apache.commons.io.IOUtils.LINE_SEPARATOR
org.apache.commons.io.FileUtils.ONE_KB_BI
org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY
org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>($byte[]$long)
org.apache.commons.io.filefilter.WildcardFileFilter.wildcards
org.apache.commons.io.FileUtils.ONE_TB_BI
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.HexDump.EOL
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()
org.apache.commons.io.IOUtils.DIR_SEPARATOR
org.apache.commons.io.FileSystemUtils.<clinit>()
org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR
org.apache.commons.io.output.ByteArrayOutputStream.toString()
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.input.TailerTest.testMultiByteBreak()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.hashCode()
org.apache.commons.io.input.TailerTest.testTailerEof()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals($java.lang.Object[]$java.lang.Object[])
org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equalObject($java.lang.Object)
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()
org.apache.commons.io.FilenameUtilsWildcardTestCase.<clinit>()
org.apache.commons.io.input.TailerTest.createFile($java.io.File$long)
org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()
org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()
org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testPrimitiveLong()
org.apache.commons.io.input.TailerTest.testTailer()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()
org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject1()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E.<init>($java.lang.String$int)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testObject2()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testLong()
org.apache.commons.io.FileUtilsTestCase.createCircularSymLink($java.io.File)
org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()
org.apache.commons.io.input.TailerTest.testInterrupt()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()
org.apache.commons.io.IOUtilsTestCase.testConstants()
org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()
org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$E.<clinit>()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals($java.lang.Object)
org.apache.commons.io.DemuxTestCase.getOutput($java.lang.String)
org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.input.TailerTest.testIO335()
org.apache.commons.io.HexDumpTest.testDump()
org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()
org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()
org.apache.commons.io.input.TailerTest.testStopWithNoFile()
