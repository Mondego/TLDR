NUMBER OF NEW OR CHANGED ENTITIES : 18
NUMBER OF NEW OR CHANGED TESTS : 0
NUMBER OF ENTITY TO TEST : 59
NUMBER OF TEST TO RUN : 53
TOTAL TIME REQUIRED : 0.499212703 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.FileSystemUtils.parseDir($java.lang.String$java.lang.String)
org.apache.commons.io.FileSystemUtils.performCommand($java.lang.String[]$int)
org.apache.commons.io.filefilter.NameFileFilter.toString()
org.apache.commons.io.filefilter.PrefixFileFilter.toString()
org.apache.commons.io.HexDump.dump($java.lang.StringBuilder$long)
org.apache.commons.io.FileSystemUtils.freeSpaceUnix($java.lang.String$boolean$boolean)
org.apache.commons.io.FileSystemUtils.parseBytes($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.SuffixFileFilter.toString()
org.apache.commons.io.HexDump.<clinit>()
org.apache.commons.io.FileSystemUtils.openProcess($java.lang.String[])
org.apache.commons.io.filefilter.WildcardFileFilter.toString()
org.apache.commons.io.HexDump.dump($byte[]$long$java.io.OutputStream$int)
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FileSystemUtils.<clinit>()
org.apache.commons.io.filefilter.OrFileFilter.toString()
org.apache.commons.io.HexDump.dump($java.lang.StringBuilder$byte)
org.apache.commons.io.filefilter.AndFileFilter.toString()
======================================================
======================================================
NEW OR CHANGED TESTS : 


======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File)
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.PrefixFileFilter.toString()
org.apache.commons.io.FileSystemUtils.freeSpaceUnix($java.lang.String$boolean$boolean)
org.apache.commons.io.FileSystemUtils.parseBytes($java.lang.String$java.lang.String)
org.apache.commons.io.HexDump.<clinit>()
org.apache.commons.io.filefilter.SuffixFileFilter.toString()
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.toString()
org.apache.commons.io.HexDump.dump($byte[]$long$java.io.OutputStream$int)
org.apache.commons.io.HexDump._hexcodes
org.apache.commons.io.FilenameUtils.isSystemWindows()
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File)
org.apache.commons.io.HexDump.dump($java.lang.StringBuilder$byte)
org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR
org.apache.commons.io.IOCase.<clinit>()
org.apache.commons.io.FileSystemUtils.freeSpaceWindows($java.lang.String)
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String$boolean$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File)
org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator($java.lang.String)
org.apache.commons.io.FileSystemUtils.OS
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.HexDump._shifts
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.FileSystemUtils.parseDir($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.OrFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FileSystemUtils.openProcess($java.lang.String[])
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FileSystemUtils.freeSpaceOS($java.lang.String$int$boolean)
org.apache.commons.io.filefilter.OrFileFilter.toString()
org.apache.commons.io.FilenameUtils.wildcardMatch($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.equalsOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FileSystemUtils.INSTANCE
org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR_STR
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.FilenameUtils.separatorsToSystem($java.lang.String)
org.apache.commons.io.FilenameUtils.concat($java.lang.String$java.lang.String)
org.apache.commons.io.FileSystemUtils.performCommand($java.lang.String[]$int)
org.apache.commons.io.filefilter.NameFileFilter.toString()
org.apache.commons.io.FilenameUtils.normalize($java.lang.String)
org.apache.commons.io.FileSystemUtils.freeSpace($java.lang.String)
org.apache.commons.io.HexDump.dump($java.lang.StringBuilder$long)
org.apache.commons.io.FilenameUtils.equalsNormalized($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.OrFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.HexDump.EOL
org.apache.commons.io.FileSystemUtils.freeSpaceKb($java.lang.String)
org.apache.commons.io.FileSystemUtils.<clinit>()
org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR
org.apache.commons.io.FilenameUtils.doNormalize($java.lang.String$boolean)
org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.AndFileFilter.toString()
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File)
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchCaseSpecified()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()
org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatchOnSystem()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()
org.apache.commons.io.filefilter.FileFilterTestCase.testOr()
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()
org.apache.commons.io.FilenameUtilsTestCase.testConcat()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()
org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.HexDumpTest.testDump()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize()
