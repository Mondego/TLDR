NUMBER OF NEW OR CHANGED ENTITIES : 12
NUMBER OF NEW OR CHANGED TESTS : 61
NUMBER OF ENTITY TO TEST : 34
NUMBER OF TEST TO RUN : 63
TOTAL TIME REQUIRED : 0.797520782 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.WildcardFileFilter.toString()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.hashCode()
org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals($java.lang.Object[]$java.lang.Object[])
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$boolean)
org.apache.commons.io.FilenameUtilsWildcardTestCase.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testPrimitiveLong()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testLong()
org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()
org.apache.commons.io.input.ClosedInputStreamTest.testRead()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingUTF16()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()
org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()
org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream($java.io.InputStream)
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.input.XmlStreamReaderTest.getXML($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()
org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.net.URLConnection)
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()
org.apache.commons.io.input.XmlStreamReaderTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals($java.lang.Object)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingBig5()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testString()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.FileUtils.ONE_MB_BI
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[])
org.apache.commons.io.FileUtils.UTF8
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.WildcardFileFilter.toString()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FilenameUtils.isSystemWindows()
org.apache.commons.io.monitor.FileAlterationMonitor.run()
org.apache.commons.io.FileUtils.ONE_ZB
org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR
org.apache.commons.io.IOCase.<clinit>()
org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR_STR
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String)
org.apache.commons.io.FileUtils.ONE_KB_BI
org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.filefilter.WildcardFileFilter.wildcards
org.apache.commons.io.FileUtils.ONE_EB_BI
org.apache.commons.io.FileUtils.ONE_PB_BI
org.apache.commons.io.FileUtils.ONE_TB_BI
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List)
org.apache.commons.io.FileUtils.ONE_GB_BI
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.monitor.FileAlterationObserver.listFiles($java.io.File)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.FileUtils.decodeUrl($java.lang.String)
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()
org.apache.commons.io.filefilter.WildcardFileFilter.caseSensitivity
org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.FileUtils.ONE_YB
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify($org.apache.commons.io.monitor.FileEntry$org.apache.commons.io.monitor.FileEntry[]$java.io.File[])
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.hashCode()
org.apache.commons.io.output.TaggedOutputStreamTest.testOtherException()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals($java.lang.Object[]$java.lang.Object[])
org.apache.commons.io.FilenameUtilsWildcardTestCase.testMatch2()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$boolean)
org.apache.commons.io.FilenameUtilsWildcardTestCase.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf8()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testPrimitiveLong()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16LE()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32LE()
org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch($java.lang.String$java.lang.String$boolean)
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testLong()
org.apache.commons.io.input.XmlStreamReaderTest.testRawContent()
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncodingUtf32()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomCp1047()
org.apache.commons.io.input.ClosedInputStreamTest.testRead()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingUTF16()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf32()
org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testStream()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf32BE()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUsAscii()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testExpected()
org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream($java.io.InputStream)
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomUtf16BE()
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.input.XmlStreamReaderTest.getXML($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()
org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()
org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.FileUtilsTestCase.createCircularSymLink($java.io.File)
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.net.URLConnection)
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf16()
org.apache.commons.io.input.XmlStreamReaderTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBomUtf8()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest$Test.equals($java.lang.Object)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingBig5()
org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testString()
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBomIso8859_1()
