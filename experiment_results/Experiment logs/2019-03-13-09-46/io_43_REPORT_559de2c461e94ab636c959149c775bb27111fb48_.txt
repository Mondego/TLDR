NUMBER OF NEW OR CHANGED ENTITIES : 85
NUMBER OF NEW OR CHANGED TESTS : 98
NUMBER OF ENTITY TO TEST : 125
NUMBER OF TEST TO RUN : 122
TOTAL TIME REQUIRED : 1.053223909 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.FilenameUtils.IPV6_MAX_HEX_GROUPS
org.apache.commons.io.input.ObservableInputStream$Observer.closed()
org.apache.commons.io.input.AbstractCharacterFilterReader.read($char[]$int$int)
org.apache.commons.io.input.buffer.CircularByteBuffer.hasSpace($int)
org.apache.commons.io.input.ReversedLinesFileReader.readLine()
org.apache.commons.io.input.CharacterFilterReader.filter($int)
org.apache.commons.io.input.buffer.CircularBufferInputStream.close()
org.apache.commons.io.FileSystem.<init>($java.lang.String$int$boolean$boolean$int$int$char[]$java.lang.String[])
org.apache.commons.io.input.ReversedLinesFileReader.DEFAULT_BLOCK_SIZE
org.apache.commons.io.input.buffer.CircularByteBuffer.read($byte[]$int$int)
org.apache.commons.io.input.buffer.PeekableInputStream.<init>($java.io.InputStream)
org.apache.commons.io.monitor.FileAlterationMonitor.run()
org.apache.commons.io.input.buffer.CircularBufferInputStream.in
org.apache.commons.io.input.ReversedLinesFileReader.close()
org.apache.commons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver.data($int)
org.apache.commons.io.input.buffer.CircularBufferInputStream.haveBytes($int)
org.apache.commons.io.input.buffer.CircularBufferInputStream.read()
org.apache.commons.io.input.AbstractCharacterFilterReader.<init>($java.io.Reader)
org.apache.commons.io.input.buffer.PeekableInputStream.peek($byte[]$int$int)
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.input.CharacterSetFilterReader.filter($int)
org.apache.commons.io.input.AbstractCharacterFilterReader.read()
org.apache.commons.io.input.CharacterSetFilterReader.<init>($java.io.Reader$java.util.Set)
org.apache.commons.io.FilenameUtils.REG_NAME_PART_PATTERN
org.apache.commons.io.input.buffer.CircularByteBuffer.add($byte)
org.apache.commons.io.FilenameUtils.IPV6_MAX_HEX_DIGITS_PER_GROUP
org.apache.commons.io.FileSystem.getMaxFileNameLength()
org.apache.commons.io.FileSystem.getMaxPathLength()
org.apache.commons.io.FileUtils.decodeUrl($java.lang.String)
org.apache.commons.io.input.buffer.CircularByteBuffer.read()
org.apache.commons.io.input.buffer.CircularBufferInputStream.fillBuffer()
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.FileSystem.isReservedFileName($java.lang.CharSequence)
org.apache.commons.io.FileSystem.toLegalFileName($java.lang.String$char)
org.apache.commons.io.input.CharacterFilterReader.<init>($java.io.Reader$int)
org.apache.commons.io.input.ReversedLinesFileReader.EMPTY_STRING
org.apache.commons.io.input.ObservableInputStream$Observer.error($java.io.IOException)
org.apache.commons.io.FileSystem.isIllegalFileNameChar($char)
org.apache.commons.io.FilenameUtils.IPV4_PATTERN
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.input.buffer.CircularByteBuffer.endOffset
org.apache.commons.io.input.buffer.CircularByteBuffer.<init>()
org.apache.commons.io.FileSystem.isLegalFileName($java.lang.CharSequence)
org.apache.commons.io.input.buffer.CircularBufferInputStream.read($byte[]$int$int)
org.apache.commons.io.FilenameUtils.BASE_16
org.apache.commons.io.FileSystem.getReservedFileNames()
org.apache.commons.io.input.CharacterSetFilterReader.EMPTY_SET
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File)
org.apache.commons.io.input.CharacterFilterReader.skip
org.apache.commons.io.FileSystem.<clinit>()
org.apache.commons.io.input.buffer.CircularBufferInputStream.buffer
org.apache.commons.io.FileSystem.isCasePreserving()
org.apache.commons.io.input.buffer.PeekableInputStream.<init>($java.io.InputStream$int)
org.apache.commons.io.input.CharacterSetFilterReader.<clinit>()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FilenameUtils.IPV4_MAX_OCTET_VALUE
org.apache.commons.io.input.buffer.CircularBufferInputStream.bufferSize
org.apache.commons.io.FileSystem.getIllegalFileNameChars()
org.apache.commons.io.input.buffer.CircularByteBuffer.add($byte[]$int$int)
org.apache.commons.io.FileSystem.isCaseSensitive()
org.apache.commons.io.input.buffer.CircularByteBuffer.clear()
org.apache.commons.io.input.buffer.CircularByteBuffer.hasBytes()
org.apache.commons.io.input.buffer.CircularBufferInputStream.eofSeen
org.apache.commons.io.input.buffer.CircularByteBuffer.hasSpace()
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$int$java.lang.String)
org.apache.commons.io.input.buffer.CircularByteBuffer.buffer
org.apache.commons.io.input.ObservableInputStream$Observer.data($int)
org.apache.commons.io.input.buffer.CircularByteBuffer.peek($byte[]$int$int)
org.apache.commons.io.FileSystem.caseSensitive
org.apache.commons.io.input.buffer.CircularBufferInputStream.<init>($java.io.InputStream$int)
org.apache.commons.io.input.buffer.CircularByteBuffer.currentNumberOfBytes
org.apache.commons.io.FilenameUtils.MAX_UNSIGNED_SHORT
org.apache.commons.io.input.buffer.CircularBufferInputStream.<init>($java.io.InputStream)
org.apache.commons.io.input.buffer.CircularByteBuffer.<init>($int)
org.apache.commons.io.input.buffer.CircularByteBuffer.getSpace()
org.apache.commons.io.input.CharacterSetFilterReader.skipSet
org.apache.commons.io.FileSystem.casePreserving
org.apache.commons.io.input.buffer.CircularBufferInputStream.read($byte[])
org.apache.commons.io.input.buffer.CircularByteBuffer.startOffset
org.apache.commons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver.data($byte[]$int$int)
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$int$java.nio.charset.Charset)
org.apache.commons.io.input.buffer.PeekableInputStream.peek($byte[])
org.apache.commons.io.input.ObservableInputStream$Observer.data($byte[]$int$int)
org.apache.commons.io.input.ObservableInputStream$Observer.finished()
org.apache.commons.io.input.buffer.CircularByteBuffer.getCurrentNumberOfBytes()
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.input.ObservableInputStreamTest$LastByteKeepingObserver.finished()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize0FilterSize1()
org.apache.commons.io.input.CharacterFilterReaderTest.<init>()
org.apache.commons.io.output.TeeOutputStreamTest.testTee()
org.apache.commons.io.FileUtilsCopyToFileTestCase.testCopyInputStreamToFile()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testStopWhileWaitingForNextInterval()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Big()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize_with_nullbytes()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0FilterSize0()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterAll()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterAll()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase$1.newThread($java.lang.Runnable)
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterFirst()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.input.buffer.CircularBufferInputStreamTest.testRandomRead()
org.apache.commons.io.input.ObservableInputStreamTest$LastBytesKeepingObserver.data($byte[]$int$int)
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0NullFilter()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()
org.apache.commons.io.input.buffer.CircularBufferInputStreamTest.newInputBuffer()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterFirst()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0FilterSize1()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterNone()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterFirst()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()
org.apache.commons.io.input.ObservableInputStreamTest$LastByteKeepingObserver.closed()
org.apache.commons.io.FileUtilsCopyToFileTestCase$CheckingInputStream.<init>($org.apache.commons.io.FileUtilsCopyToFileTestCase$byte[])
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterLast()
org.apache.commons.io.input.CharacterSetFilterReaderTest.<init>()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterLast()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()
org.apache.commons.io.FileUtilsCopyToFileTestCase$CheckingInputStream.isClosed()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.input.ObservableInputStreamTest$LastByteKeepingObserver.data($int)
org.apache.commons.io.input.buffer.CircularBufferInputStreamTest.<init>()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionVarArgs()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals($java.lang.String$byte[]$byte[])
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()
org.apache.commons.io.FileUtilsCopyToFileTestCase.testCopyToFile()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()
org.apache.commons.io.FileUtilsCopyToFileTestCase.setUp()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize1FilterSize1()
org.apache.commons.io.FileUtilsCopyToFileTestCase$CheckingInputStream.close()
org.apache.commons.io.FileUtilsCopyToFileTestCase.<init>()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()
org.apache.commons.io.FilenameUtilsTestCase.testConcat()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterLast()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.FilenameUtilsTestCase.<clinit>()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize1FilterSize1()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Small()
org.apache.commons.io.FileUtilsCopyToFileTestCase.getTestDirectory()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.FileUtils.ONE_MB_BI
org.apache.commons.io.input.ObservableInputStream$Observer.closed()
org.apache.commons.io.input.AbstractCharacterFilterReader.read($char[]$int$int)
org.apache.commons.io.input.ReversedLinesFileReader.DEFAULT_BLOCK_SIZE
org.apache.commons.io.FileSystem.maxFileNameLength
org.apache.commons.io.FilenameUtils.isSystemWindows()
org.apache.commons.io.monitor.FileAlterationMonitor.run()
org.apache.commons.io.input.ReversedLinesFileReader.close()
org.apache.commons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver.data($int)
org.apache.commons.io.input.buffer.CircularBufferInputStream.read()
org.apache.commons.io.input.AbstractCharacterFilterReader.<init>($java.io.Reader)
org.apache.commons.io.input.buffer.PeekableInputStream.peek($byte[]$int$int)
org.apache.commons.io.input.CharacterSetFilterReader.filter($int)
org.apache.commons.io.input.ReversedLinesFileReader.encoding
org.apache.commons.io.FileSystem.getMaxFileNameLength()
org.apache.commons.io.monitor.FileAlterationObserver.listFiles($java.io.File)
org.apache.commons.io.FileSystem.GENERIC
org.apache.commons.io.input.ReversedLinesFileReader.currentFilePart
org.apache.commons.io.input.ReversedLinesFileReader.blockSize
org.apache.commons.io.FileUtils.ONE_YB
org.apache.commons.io.input.ObservableInputStream$Observer.error($java.io.IOException)
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$java.nio.charset.Charset)
org.apache.commons.io.input.buffer.CircularByteBuffer.endOffset
org.apache.commons.io.FileSystem.IS_OS_WINDOWS
org.apache.commons.io.input.buffer.CircularByteBuffer.<init>()
org.apache.commons.io.input.buffer.CircularBufferInputStream.read($byte[]$int$int)
org.apache.commons.io.FilenameUtils.BASE_16
org.apache.commons.io.FileSystem.$VALUES
org.apache.commons.io.input.CharacterSetFilterReader.EMPTY_SET
org.apache.commons.io.input.CharacterFilterReader.skip
org.apache.commons.io.FileSystem.illegalFileNameChars
org.apache.commons.io.FileSystem.<clinit>()
org.apache.commons.io.FileSystem.isCasePreserving()
org.apache.commons.io.input.CharacterSetFilterReader.<clinit>()
org.apache.commons.io.FilenameUtils.splitOnTokens($java.lang.String)
org.apache.commons.io.FilenameUtils.IPV4_MAX_OCTET_VALUE
org.apache.commons.io.FileSystem.MAC_OSX
org.apache.commons.io.FileUtils.ONE_ZB
org.apache.commons.io.input.buffer.CircularByteBuffer.clear()
org.apache.commons.io.input.buffer.CircularByteBuffer.hasBytes()
org.apache.commons.io.input.buffer.CircularBufferInputStream.eofSeen
org.apache.commons.io.input.ReversedLinesFileReader.avoidNewlineSplitBufferSize
org.apache.commons.io.FileUtils.ONE_KB_BI
org.apache.commons.io.input.buffer.CircularByteBuffer.currentNumberOfBytes
org.apache.commons.io.input.buffer.CircularBufferInputStream.<init>($java.io.InputStream$int)
org.apache.commons.io.input.buffer.CircularByteBuffer.<init>($int)
org.apache.commons.io.input.buffer.CircularByteBuffer.getSpace()
org.apache.commons.io.input.CharacterSetFilterReader.skipSet
org.apache.commons.io.input.buffer.CircularBufferInputStream.read($byte[])
org.apache.commons.io.FileUtils.ONE_TB_BI
org.apache.commons.io.FileSystem.OS_NAME
org.apache.commons.io.input.buffer.CircularByteBuffer.getCurrentNumberOfBytes()
org.apache.commons.io.input.ReversedLinesFileReader.totalByteLength
org.apache.commons.io.FileSystem.IS_OS_MAC
org.apache.commons.io.FilenameUtils.IPV6_MAX_HEX_GROUPS
org.apache.commons.io.FileSystem.WINDOWS
org.apache.commons.io.input.buffer.CircularByteBuffer.hasSpace($int)
org.apache.commons.io.input.ReversedLinesFileReader.readLine()
org.apache.commons.io.input.ReversedLinesFileReader.trailingNewlineOfFileSkipped
org.apache.commons.io.input.CharacterFilterReader.filter($int)
org.apache.commons.io.FileSystem.reservedFileNames
org.apache.commons.io.input.buffer.CircularBufferInputStream.close()
org.apache.commons.io.FileSystem.<init>($java.lang.String$int$boolean$boolean$int$int$char[]$java.lang.String[])
org.apache.commons.io.input.buffer.CircularByteBuffer.read($byte[]$int$int)
org.apache.commons.io.input.buffer.PeekableInputStream.<init>($java.io.InputStream)
org.apache.commons.io.input.buffer.CircularBufferInputStream.in
org.apache.commons.io.FilenameUtils.OTHER_SEPARATOR
org.apache.commons.io.IOCase.<clinit>()
org.apache.commons.io.input.buffer.CircularBufferInputStream.haveBytes($int)
org.apache.commons.io.input.ReversedLinesFileReader.byteDecrement
org.apache.commons.io.FilenameUtils.<clinit>()
org.apache.commons.io.input.ReversedLinesFileReader.totalBlockCount
org.apache.commons.io.input.AbstractCharacterFilterReader.read()
org.apache.commons.io.FileUtils.ONE_EB_BI
org.apache.commons.io.input.ReversedLinesFileReader.newLineSequences
org.apache.commons.io.FileUtils.ONE_PB_BI
org.apache.commons.io.input.CharacterSetFilterReader.<init>($java.io.Reader$java.util.Set)
org.apache.commons.io.FilenameUtils.REG_NAME_PART_PATTERN
org.apache.commons.io.input.buffer.CircularByteBuffer.add($byte)
org.apache.commons.io.FileUtils.ONE_GB_BI
org.apache.commons.io.FilenameUtils.IPV6_MAX_HEX_DIGITS_PER_GROUP
org.apache.commons.io.FileSystem.getMaxPathLength()
org.apache.commons.io.FileUtils.decodeUrl($java.lang.String)
org.apache.commons.io.input.buffer.CircularByteBuffer.read()
org.apache.commons.io.input.buffer.CircularBufferInputStream.fillBuffer()
org.apache.commons.io.FileUtils.<clinit>()
org.apache.commons.io.FileSystem.isReservedFileName($java.lang.CharSequence)
org.apache.commons.io.FileSystem.toLegalFileName($java.lang.String$char)
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify($org.apache.commons.io.monitor.FileEntry$org.apache.commons.io.monitor.FileEntry[]$java.io.File[])
org.apache.commons.io.input.CharacterFilterReader.<init>($java.io.Reader$int)
org.apache.commons.io.input.ReversedLinesFileReader.EMPTY_STRING
org.apache.commons.io.FileSystem.isIllegalFileNameChar($char)
org.apache.commons.io.FilenameUtils.IPV4_PATTERN
org.apache.commons.io.FileSystem.isLegalFileName($java.lang.CharSequence)
org.apache.commons.io.FileSystem.maxPathLength
org.apache.commons.io.FileSystem.getReservedFileNames()
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File)
org.apache.commons.io.FileSystem.IS_OS_LINUX
org.apache.commons.io.input.buffer.CircularBufferInputStream.buffer
org.apache.commons.io.input.buffer.PeekableInputStream.<init>($java.io.InputStream$int)
org.apache.commons.io.input.buffer.CircularBufferInputStream.bufferSize
org.apache.commons.io.FileSystem.getIllegalFileNameChars()
org.apache.commons.io.input.buffer.CircularByteBuffer.add($byte[]$int$int)
org.apache.commons.io.FileSystem.isCaseSensitive()
org.apache.commons.io.FileSystem.LINUX
org.apache.commons.io.input.ReversedLinesFileReader.randomAccessFile
org.apache.commons.io.input.buffer.CircularByteBuffer.hasSpace()
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$int$java.lang.String)
org.apache.commons.io.FilenameUtils.EXTENSION_SEPARATOR_STR
org.apache.commons.io.input.buffer.CircularByteBuffer.buffer
org.apache.commons.io.input.ObservableInputStream$Observer.data($int)
org.apache.commons.io.input.buffer.CircularByteBuffer.peek($byte[]$int$int)
org.apache.commons.io.FileSystem.caseSensitive
org.apache.commons.io.FileUtils.EMPTY_FILE_ARRAY
org.apache.commons.io.FilenameUtils.MAX_UNSIGNED_SHORT
org.apache.commons.io.input.buffer.CircularBufferInputStream.<init>($java.io.InputStream)
org.apache.commons.io.FileSystem.casePreserving
org.apache.commons.io.input.buffer.CircularByteBuffer.startOffset
org.apache.commons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver.data($byte[]$int$int)
org.apache.commons.io.input.ReversedLinesFileReader.<init>($java.io.File$int$java.nio.charset.Charset)
org.apache.commons.io.input.buffer.PeekableInputStream.peek($byte[])
org.apache.commons.io.monitor.FileAlterationObserver.checkAndNotify()
org.apache.commons.io.FilenameUtils.SYSTEM_SEPARATOR
org.apache.commons.io.input.ObservableInputStream$Observer.data($byte[]$int$int)
org.apache.commons.io.input.ObservableInputStream$Observer.finished()
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testFileSizeIsExactMultipleOfBlockSize()
org.apache.commons.io.input.ObservableInputStreamTest$LastByteKeepingObserver.finished()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize0FilterSize1()
org.apache.commons.io.input.CharacterFilterReaderTest.<init>()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testShiftJISFile()
org.apache.commons.io.output.TeeOutputStreamTest.testTee()
org.apache.commons.io.FileUtilsCopyToFileTestCase.testCopyInputStreamToFile()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()
org.apache.commons.io.FileSystemTestCase.testSorted()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingUTF16()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testEmptyFile()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testStopWhileWaitingForNextInterval()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingUTF16()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Big()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize_with_nullbytes()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0FilterSize0()
org.apache.commons.io.FilenameUtilsTestCase.testGetPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterAll()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterAll()
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()
org.apache.commons.io.monitor.FileAlterationMonitorTestCase$1.newThread($java.lang.Runnable)
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testWindows31jFile()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterFirst()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()
org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testxWindows950File()
org.apache.commons.io.input.buffer.CircularBufferInputStreamTest.testRandomRead()
org.apache.commons.io.input.ObservableInputStreamTest$LastBytesKeepingObserver.data($byte[]$int$int)
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0NullFilter()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()
org.apache.commons.io.FileSystemTestCase.testIsReservedFileName()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.closeReader()
org.apache.commons.io.input.buffer.CircularBufferInputStreamTest.newInputBuffer()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterFirst()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize0FilterSize1()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.closeReader()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testUnsupportedEncodingBig5()
org.apache.commons.io.FileSystemTestCase.testToLegalFileNameWindows()
org.apache.commons.io.FilenameUtilsTestCase.testNormalize()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterNone()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterFirst()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testIsoFileManyWindowsBreaksSmallBlockSize2VerifyBlockSpanningNewLines()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.testFileSizeIsExactMultipleOfBlockSize()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()
org.apache.commons.io.input.ObservableInputStreamTest$LastByteKeepingObserver.closed()
org.apache.commons.io.input.ReversedLinesFileReaderTestSimple.closeReader()
org.apache.commons.io.FileUtilsCopyToFileTestCase$CheckingInputStream.<init>($org.apache.commons.io.FileUtilsCopyToFileTestCase$byte[])
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize2FilterLast()
org.apache.commons.io.input.CharacterSetFilterReaderTest.<init>()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()
org.apache.commons.io.FileSystemTestCase.testIsLegalName()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize2FilterSize1FilterLast()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()
org.apache.commons.io.monitor.FileAlterationObserverTestCase.checkAndNotify()
org.apache.commons.io.FileUtilsCopyToFileTestCase$CheckingInputStream.isClosed()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()
org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()
org.apache.commons.io.FilenameUtilsTestCase.testGetName()
org.apache.commons.io.input.ObservableInputStreamTest$LastByteKeepingObserver.data($int)
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.assertFileWithShrinkingTestLines($org.apache.commons.io.input.ReversedLinesFileReader)
org.apache.commons.io.input.buffer.CircularBufferInputStreamTest.<init>()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionVarArgs()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()
org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testxWindows949File()
org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals($java.lang.String$byte[]$byte[])
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()
org.apache.commons.io.FileUtilsCopyToFileTestCase.testCopyToFile()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testGBK()
org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()
org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()
org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()
org.apache.commons.io.FileUtilsCopyToFileTestCase.setUp()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()
org.apache.commons.io.FileUtilsTestCase.createCircularSymLink($java.io.File)
org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize1FilterSize1()
org.apache.commons.io.FileUtilsCopyToFileTestCase$CheckingInputStream.close()
org.apache.commons.io.FileUtilsCopyToFileTestCase.<init>()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()
org.apache.commons.io.FilenameUtilsTestCase.testConcat()
org.apache.commons.io.input.CharacterFilterReaderTest.testInputSize2FilterSize1FilterLast()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader()
org.apache.commons.io.input.ReversedLinesFileReaderTestParamBlockSize.testUnsupportedEncodingBig5()
org.apache.commons.io.FilenameUtilsTestCase.<clinit>()
org.apache.commons.io.input.CharacterSetFilterReaderTest.testInputSize1FilterSize1()
org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Small()
org.apache.commons.io.FileUtilsCopyToFileTestCase.getTestDirectory()
org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()
