NUMBER OF NEW OR CHANGED ENTITIES : 126
NUMBER OF NEW OR CHANGED TESTS : 134
NUMBER OF ENTITY TO TEST : 198
NUMBER OF TEST TO RUN : 187
TOTAL TIME REQUIRED : 1.461057174 second
======================================================
======================================================
NEW OR CHANGED ENTITIES : 


org.apache.commons.io.input.XmlStreamReaderException.<init>($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.writer
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream)
org.apache.commons.io.output.CountingOutputStream.getCount()
org.apache.commons.io.input.XmlStreamReader.BUFFER_SIZE
org.apache.commons.io.filefilter.PrefixFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.input.BOMInputStream.reset()
org.apache.commons.io.output.XmlStreamWriter.<clinit>()
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URL)
org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()
org.apache.commons.io.input.XmlStreamReader.defaultEncoding
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.util.List)
org.apache.commons.io.output.XmlStreamWriter.<init>($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.getDefaultEncoding()
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String$boolean$org.apache.commons.io.IOCase)
org.apache.commons.io.input.XmlStreamReader.XML_GUESS_BYTES
org.apache.commons.io.output.XmlStreamWriter.close()
org.apache.commons.io.input.XmlStreamReader.ENCODING_PATTERN
org.apache.commons.io.input.XmlStreamReader.getEncoding()
org.apache.commons.io.output.XmlStreamWriter.<init>($java.io.OutputStream)
org.apache.commons.io.filefilter.WildcardFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.input.BOMInputStream.find()
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.File)
org.apache.commons.io.filefilter.PrefixFileFilter.accept($java.io.File)
org.apache.commons.io.input.BOMInputStream.read($byte[])
org.apache.commons.io.filefilter.WildcardFilter.<init>($java.util.List)
org.apache.commons.io.input.XmlStreamReader.UTF_16BE
org.apache.commons.io.input.XmlStreamReader.CHARSET_PATTERN
org.apache.commons.io.output.XmlStreamWriter.flush()
org.apache.commons.io.filefilter.MagicNumberFileFilter.accept($java.io.File)
org.apache.commons.io.input.XmlStreamReaderException.contentTypeMime
org.apache.commons.io.input.XmlStreamReader.doLenientDetection($java.lang.String$java.io.InputStream$org.apache.commons.io.input.XmlStreamReaderException)
org.apache.commons.io.input.XmlStreamReaderException.serialVersionUID
org.apache.commons.io.filefilter.SuffixFileFilter.accept($java.io.File)
org.apache.commons.io.input.XmlStreamReader.doRawStream($java.io.InputStream$boolean)
org.apache.commons.io.input.XmlStreamReaderException.xmlEncoding
org.apache.commons.io.output.XmlStreamWriter.BUFFER_SIZE
org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()
org.apache.commons.io.output.XmlStreamWriter.getDefaultEncoding()
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean)
org.apache.commons.io.input.BOMInputStream.skip($long)
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.output.XmlStreamWriter.<init>($java.io.File)
org.apache.commons.io.output.XmlStreamWriter.out
org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean)
org.apache.commons.io.output.XmlStreamWriter.xmlPrologWriter
org.apache.commons.io.output.XmlStreamWriter.getEncoding()
org.apache.commons.io.input.XmlStreamReader.UTF_8
org.apache.commons.io.output.XmlStreamWriter.detectEncoding($char[]$int$int)
org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>($byte[]$long)
org.apache.commons.io.input.XmlStreamReader.reader
org.apache.commons.io.input.XmlStreamReaderException.bomEncoding
org.apache.commons.io.filefilter.NameFileFilter.toString()
org.apache.commons.io.output.CountingOutputStream.beforeWrite($int)
org.apache.commons.io.input.XmlStreamReaderException.getContentTypeMime()
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.ENCODING_PATTERN
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.input.XmlStreamReader.RAW_EX_2
org.apache.commons.io.input.XmlStreamReader.RAW_EX_1
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.util.List)
org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()
org.apache.commons.io.input.XmlStreamReader.US_ASCII
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File)
org.apache.commons.io.input.XmlStreamReader.EBCDIC
org.apache.commons.io.input.BOMInputStream.read()
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.PrefixFileFilter.toString()
org.apache.commons.io.filefilter.SuffixFileFilter.toString()
org.apache.commons.io.filefilter.SuffixFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URLConnection$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.toString()
org.apache.commons.io.input.CountingInputStream.getCount()
org.apache.commons.io.input.CountingInputStream.afterRead($int)
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.output.XmlStreamWriter.write($char[]$int$int)
org.apache.commons.io.filefilter.NameFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.UTF_16LE
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.util.List)
org.apache.commons.io.output.CountingOutputStream.resetCount()
org.apache.commons.io.output.XmlStreamWriter.<init>($java.io.OutputStream$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()
org.apache.commons.io.input.CountingInputStream.skip($long)
org.apache.commons.io.input.BOMInputStream.mark($int)
org.apache.commons.io.input.XmlStreamReader.read($char[]$int$int)
org.apache.commons.io.input.XmlStreamReader.doHttpStream($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.input.CountingInputStream.resetCount()
org.apache.commons.io.input.XmlStreamReaderException.<init>($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.encoding
org.apache.commons.io.input.XmlStreamReader.UTF_16
org.apache.commons.io.input.XmlStreamReader.BOMS
org.apache.commons.io.filefilter.NameFileFilter.accept($java.io.File)
org.apache.commons.io.output.XmlStreamWriter.defaultEncoding
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.encoding
org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.input.XmlStreamReaderException.contentTypeEncoding
org.apache.commons.io.ByteOrderMark.<clinit>()
org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.ByteOrderMark.toString()
org.apache.commons.io.input.XmlStreamReader.getContentTypeMime($java.lang.String)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.input.XmlStreamReader.HTTP_EX_1
org.apache.commons.io.input.XmlStreamReader.HTTP_EX_2
org.apache.commons.io.input.XmlStreamReader.HTTP_EX_3
org.apache.commons.io.input.XmlStreamReader.close()
org.apache.commons.io.input.XmlStreamReaderException.xmlGuessEncoding
org.apache.commons.io.input.BOMInputStream.read($byte[]$int$int)
org.apache.commons.io.input.BOMInputStream.matches($org.apache.commons.io.ByteOrderMark)
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.getXmlProlog($java.io.InputStream$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List)
org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.input.BOMInputStream.readFirstBytes()
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.BOMInputStream.getBOM()
======================================================
======================================================
NEW OR CHANGED TESTS : 


org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.setUp()
org.apache.commons.io.output.XmlStreamWriterTest.createXmlContent($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalkUTF16()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest$MockXmlStreamReader.<init>($java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()
org.apache.commons.io.input.compatibility.XmlStreamReader.setDefaultEncoding($java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()
org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.io.InputStream$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()
org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.<init>()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.<init>()
org.apache.commons.io.input.compatibility.XmlStreamReader.read($char[]$int$int)
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()
org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader($java.io.InputStream$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()
org.apache.commons.io.filefilter.FileFilterTestCase.<clinit>()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeMime($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBom()
org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReaderException.<init>($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.io.InputStream)
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingNoBOM()
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.getDefaultEncoding()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testAppXml()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkTextXml($boolean$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeEncoding()
org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream($java.io.InputStream$boolean)
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$boolean)
org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()
org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding($java.io.BufferedInputStream)
org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.<clinit>()
org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()
org.apache.commons.io.input.compatibility.XmlStreamReaderException.getInputStream()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReaderException.<init>($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.io.InputStream)
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()
org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeMime($java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()
org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()
org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testNot()
org.apache.commons.io.input.XmlStreamReaderTest.<init>()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.net.URL)
org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()
org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()
org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection($java.lang.String$org.apache.commons.io.input.compatibility.XmlStreamReaderException)
org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()
org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.io.InputStream)
org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()
org.apache.commons.io.input.compatibility.XmlStreamReader.close()
org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeEncoding($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader.<init>($java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testTextXml()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()
org.apache.commons.io.output.XmlStreamWriterTest.<init>()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBom()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream)
org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.File)
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testOr()
org.apache.commons.io.input.compatibility.XmlStreamReader.getEncoding()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()
org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()
org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()
org.apache.commons.io.DirectoryWalkerTestCase.<clinit>()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.net.URLConnection)
org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()
org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()
org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog($java.io.BufferedInputStream$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeMime()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkAppXml($boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard()
org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding($java.io.BufferedInputStream)
org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()
org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()
org.apache.commons.io.DirectoryWalkerTestCaseJava4.<clinit>()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()
======================================================
======================================================
ALL ENTITY TO TEST : 


org.apache.commons.io.input.CountingInputStream.resetByteCount()
org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter($byte[])
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream)
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File)
org.apache.commons.io.output.CountingOutputStream.getCount()
org.apache.commons.io.filefilter.PrefixFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.BUFFER_SIZE
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.ByteOrderMark.UTF_8
org.apache.commons.io.input.BOMInputStream.fbLength
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URL)
org.apache.commons.io.input.BOMInputStream.hasBOM()
org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()
org.apache.commons.io.filefilter.PrefixFileFilter.prefixes
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String$boolean$org.apache.commons.io.IOCase)
org.apache.commons.io.input.XmlStreamReader.ENCODING_PATTERN
org.apache.commons.io.filefilter.WildcardFileFilter.caseSensitivity
org.apache.commons.io.filefilter.NameFileFilter.names
org.apache.commons.io.filefilter.WildcardFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.input.BOMInputStream.find()
org.apache.commons.io.input.ProxyInputStream.read($byte[])
org.apache.commons.io.filefilter.WildcardFilter.<init>($java.util.List)
org.apache.commons.io.input.XmlStreamReader.UTF_16BE
org.apache.commons.io.output.XmlStreamWriter.flush()
org.apache.commons.io.output.TeeOutputStream.write($int)
org.apache.commons.io.input.XmlStreamReaderException.contentTypeMime
org.apache.commons.io.input.BOMInputStream.markFbIndex
org.apache.commons.io.filefilter.OrFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderException.xmlEncoding
org.apache.commons.io.output.XmlStreamWriter.BUFFER_SIZE
org.apache.commons.io.FileUtils.iterateFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.input.BOMInputStream.fbIndex
org.apache.commons.io.input.CountingInputStream.getByteCount()
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.FileFilterUtils.filterSet($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.FilenameUtils.equalsOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.<init>($java.io.File)
org.apache.commons.io.output.XmlStreamWriter.xmlPrologWriter
org.apache.commons.io.output.XmlStreamWriter.getEncoding()
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.BOMInputStream.<init>($java.io.InputStream)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.lang.String[])
org.apache.commons.io.input.XmlStreamReader.reader
org.apache.commons.io.filefilter.NameFileFilter.toString()
org.apache.commons.io.output.CountingOutputStream.beforeWrite($int)
org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem($java.lang.String$java.lang.String)
org.apache.commons.io.output.TeeOutputStream.write($byte[]$int$int)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.util.List)
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.PrefixFileFilter.toString()
org.apache.commons.io.filefilter.SuffixFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.net.URLConnection$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.toString()
org.apache.commons.io.input.CountingInputStream.getCount()
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.NameFileFilter.caseSensitivity
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.lang.String[])
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File)
org.apache.commons.io.input.TeeInputStream.read($byte[]$int$int)
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable$java.util.Collection)
org.apache.commons.io.output.ProxyOutputStream.write($byte[])
org.apache.commons.io.input.ProxyInputStream.read($byte[]$int$int)
org.apache.commons.io.output.TeeOutputStream.write($byte[])
org.apache.commons.io.output.CountingOutputStream.resetCount()
org.apache.commons.io.output.XmlStreamWriter.<init>($java.io.OutputStream$java.lang.String)
org.apache.commons.io.input.BOMInputStream.hasBOM($org.apache.commons.io.ByteOrderMark)
org.apache.commons.io.filefilter.WildcardFilter.wildcards
org.apache.commons.io.input.XmlStreamReader.doHttpStream($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.input.CountingInputStream.resetCount()
org.apache.commons.io.input.XmlStreamReader.encoding
org.apache.commons.io.input.XmlStreamReader.UTF_16
org.apache.commons.io.filefilter.NameFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.defaultEncoding
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<clinit>()
org.apache.commons.io.ByteOrderMark.<clinit>()
org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.ByteOrderMark.toString()
org.apache.commons.io.input.XmlStreamReader.getContentTypeMime($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.HTTP_EX_1
org.apache.commons.io.input.XmlStreamReader.HTTP_EX_2
org.apache.commons.io.input.XmlStreamReader.HTTP_EX_3
org.apache.commons.io.input.XmlStreamReader.close()
org.apache.commons.io.input.XmlStreamReaderException.xmlGuessEncoding
org.apache.commons.io.input.TeeInputStream.read($byte[])
org.apache.commons.io.input.BOMInputStream.read($byte[]$int$int)
org.apache.commons.io.input.BOMInputStream.<init>($java.io.InputStream$boolean)
org.apache.commons.io.input.BOMInputStream.matches($org.apache.commons.io.ByteOrderMark)
org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.input.XmlStreamReader.getXmlProlog($java.io.InputStream$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.input.BOMInputStream.readFirstBytes()
org.apache.commons.io.input.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.FilenameUtils.equalsNormalized($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.OrFileFilter.accept($java.io.File)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.BOMInputStream.getBOM()
org.apache.commons.io.filefilter.SuffixFileFilter.suffixes
org.apache.commons.io.input.XmlStreamReaderException.<init>($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.writer
org.apache.commons.io.output.CountingOutputStream.resetByteCount()
org.apache.commons.io.filefilter.MagicNumberFileFilter.magicNumbers
org.apache.commons.io.input.BOMInputStream.reset()
org.apache.commons.io.filefilter.FileFilterUtils.filterList($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.FilenameUtils.equals($java.lang.String$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.<clinit>()
org.apache.commons.io.filefilter.FileFilterUtils.filter($org.apache.commons.io.filefilter.IOFileFilter$java.lang.Iterable)
org.apache.commons.io.input.XmlStreamReader.defaultEncoding
org.apache.commons.io.filefilter.MagicNumberFileFilter.byteOffset
org.apache.commons.io.input.XmlStreamReader.getDefaultEncoding()
org.apache.commons.io.output.XmlStreamWriter.<init>($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.util.List)
org.apache.commons.io.input.CountingInputStream.count
org.apache.commons.io.input.XmlStreamReader.XML_GUESS_BYTES
org.apache.commons.io.output.XmlStreamWriter.close()
org.apache.commons.io.input.XmlStreamReader.getEncoding()
org.apache.commons.io.output.XmlStreamWriter.<init>($java.io.OutputStream)
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.File)
org.apache.commons.io.filefilter.PrefixFileFilter.accept($java.io.File)
org.apache.commons.io.input.BOMInputStream.read($byte[])
org.apache.commons.io.input.XmlStreamReader.CHARSET_PATTERN
org.apache.commons.io.filefilter.MagicNumberFileFilter.accept($java.io.File)
org.apache.commons.io.output.ProxyOutputStream.write($int)
org.apache.commons.io.input.XmlStreamReader.doLenientDetection($java.lang.String$java.io.InputStream$org.apache.commons.io.input.XmlStreamReaderException)
org.apache.commons.io.input.XmlStreamReaderException.serialVersionUID
org.apache.commons.io.filefilter.SuffixFileFilter.accept($java.io.File)
org.apache.commons.io.input.XmlStreamReader.doRawStream($java.io.InputStream$boolean)
org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()
org.apache.commons.io.output.XmlStreamWriter.getDefaultEncoding()
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$boolean)
org.apache.commons.io.input.BOMInputStream.skip($long)
org.apache.commons.io.input.BOMInputStream.markedAtStart
org.apache.commons.io.output.XmlStreamWriter.out
org.apache.commons.io.ByteOrderMark.UTF_16LE
org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean)
org.apache.commons.io.output.CountingOutputStream.getByteCount()
org.apache.commons.io.input.XmlStreamReader.UTF_8
org.apache.commons.io.input.BOMInputStream.byteOrderMark
org.apache.commons.io.output.XmlStreamWriter.detectEncoding($char[]$int$int)
org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>($byte[]$long)
org.apache.commons.io.input.XmlStreamReaderException.bomEncoding
org.apache.commons.io.filefilter.WildcardFileFilter.wildcards
org.apache.commons.io.input.XmlStreamReaderException.getContentTypeMime()
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.lang.String[]$org.apache.commons.io.IOCase)
org.apache.commons.io.input.XmlStreamReader.<init>($java.io.InputStream$java.lang.String)
org.apache.commons.io.output.XmlStreamWriter.ENCODING_PATTERN
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.input.XmlStreamReader.RAW_EX_2
org.apache.commons.io.input.XmlStreamReader.RAW_EX_1
org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()
org.apache.commons.io.input.XmlStreamReader.US_ASCII
org.apache.commons.io.filefilter.WildcardFilter.accept($java.io.File)
org.apache.commons.io.input.XmlStreamReader.EBCDIC
org.apache.commons.io.input.BOMInputStream.firstBytes
org.apache.commons.io.input.BOMInputStream.read()
org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter($byte[]$long)
org.apache.commons.io.filefilter.SuffixFileFilter.toString()
org.apache.commons.io.input.CountingInputStream.afterRead($int)
org.apache.commons.io.filefilter.AbstractFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.PrefixFileFilter.caseSensitivity
org.apache.commons.io.ByteOrderMark.UTF_16BE
org.apache.commons.io.output.XmlStreamWriter.write($char[]$int$int)
org.apache.commons.io.filefilter.DelegateFileFilter.accept($java.io.File)
org.apache.commons.io.filefilter.NameFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.UTF_16LE
org.apache.commons.io.filefilter.NameFileFilter.<init>($java.util.List)
org.apache.commons.io.filefilter.FileFilterUtils.filterList($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.filefilter.SuffixFileFilter.caseSensitivity
org.apache.commons.io.filefilter.AndFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>($byte[])
org.apache.commons.io.output.CountingOutputStream.count
org.apache.commons.io.filefilter.WildcardFileFilter.accept($java.io.File$java.lang.String)
org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()
org.apache.commons.io.input.BOMInputStream.mark($int)
org.apache.commons.io.input.CountingInputStream.skip($long)
org.apache.commons.io.input.XmlStreamReader.read($char[]$int$int)
org.apache.commons.io.input.XmlStreamReaderException.<init>($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReader.BOMS
org.apache.commons.io.output.ProxyOutputStream.write($byte[]$int$int)
org.apache.commons.io.output.XmlStreamWriter.encoding
org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()
org.apache.commons.io.input.XmlStreamReaderException.contentTypeEncoding
org.apache.commons.io.FileUtils.listFiles($java.io.File$java.lang.String[]$boolean)
org.apache.commons.io.filefilter.PrefixFileFilter.<init>($java.util.List$org.apache.commons.io.IOCase)
org.apache.commons.io.filefilter.FileFilterUtils.filterSet($org.apache.commons.io.filefilter.IOFileFilter$java.io.File[])
org.apache.commons.io.filefilter.WildcardFileFilter.<init>($java.util.List)
org.apache.commons.io.input.TeeInputStream.read()
org.apache.commons.io.input.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.filefilter.SuffixFileFilter.<init>($java.lang.String[])
org.apache.commons.io.input.ProxyInputStream.read()
org.apache.commons.io.filefilter.NotFileFilter.accept($java.io.File)
======================================================
======================================================
ALL TESTS TO RUN : 


org.apache.commons.io.filefilter.FileFilterTestCase.testFiles()
org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithoutBOM()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.setUp()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()
org.apache.commons.io.output.XmlStreamWriterTest.createXmlContent($java.lang.String$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithoutBOM()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()
org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithBOM()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomValid($java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testHttpLenient($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.<clinit>()
org.apache.commons.io.output.TeeOutputStreamTest.testTee()
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive()
org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithBOM()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditonalkUTF16()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()
org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest$MockXmlStreamReader.<init>($java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix()
org.apache.commons.io.input.compatibility.XmlStreamReader.doHttpStream($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding($java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()
org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty()
org.apache.commons.io.input.compatibility.XmlStreamReader.setDefaultEncoding($java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullListArgument()
org.apache.commons.io.input.compatibility.XmlStreamReader.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.io.InputStream$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()
org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.<init>()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF8Encoding()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMSingleRead()
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.<init>()
org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()
org.apache.commons.io.input.compatibility.XmlStreamReader.read($char[]$int$int)
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.input.XmlStreamReaderTest._testRawBomInvalid($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilter()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()
org.apache.commons.io.input.compatibility.XmlStreamReader.prepareReader($java.io.InputStream$java.lang.String)
org.apache.commons.io.FilenameUtilsTestCase.testEquals()
org.apache.commons.io.input.XmlStreamReaderTest.testHttp()
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()
org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84()
org.apache.commons.io.input.BOMInputStreamTest.testClose()
org.apache.commons.io.input.CountingInputStreamTest.testZeroLength3()
org.apache.commons.io.filefilter.FileFilterTestCase.<clinit>()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeMime($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testRawNoBom()
org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead()
org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.CountingInputStreamTest.testSkipping()
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOM()
org.apache.commons.io.input.compatibility.XmlStreamReaderException.<init>($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.io.InputStream)
org.apache.commons.io.DirectoryWalkerTestCase.createNameFilter($java.io.File[])
org.apache.commons.io.ByteOrderMarkTestCase.testToString()
org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()
org.apache.commons.io.input.CountingInputStreamTest.testEOF1()
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.<clinit>()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomInvalid($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard($java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpEncoding($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingNoBOM()
org.apache.commons.io.input.compatibility.XmlStreamReaderUtilitiesCompatibilityTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest.testEncodingAttributeXML()
org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.input.compatibility.XmlStreamReader.getDefaultEncoding()
org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()
org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithBOM()
org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()
org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testAppXml()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateHttpEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$boolean$java.lang.String)
org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering($org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArrayArgument()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkTextXml($boolean$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeEncoding()
org.apache.commons.io.input.compatibility.XmlStreamReader.doRawStream($java.io.InputStream$boolean)
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$boolean)
org.apache.commons.io.output.XmlStreamWriterTest.testLatin15Encoding()
org.apache.commons.io.input.compatibility.XmlStreamReader.getBOMEncoding($java.io.BufferedInputStream)
org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter()
org.apache.commons.io.input.XmlStreamReaderTest._testRawNoBomValid($java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.<clinit>()
org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpInvalid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()
org.apache.commons.io.input.compatibility.XmlStreamReaderException.getInputStream()
org.apache.commons.io.input.CountingInputStreamTest.testZeroLength2()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16Encoding()
org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()
org.apache.commons.io.input.compatibility.XmlStreamReaderException.<init>($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.io.InputStream)
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()
org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeMime($java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()
org.apache.commons.io.output.XmlStreamWriterTest.testDefaultEncoding()
org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFiltering($int$org.apache.commons.io.filefilter.IOFileFilter$java.io.File$boolean)
org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithoutBOM()
org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()
org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()
org.apache.commons.io.input.compatibility.XmlStreamReader.isAppXml($java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()
org.apache.commons.io.filefilter.FileFilterTestCase.testNot()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()
org.apache.commons.io.input.XmlStreamReaderTest.<init>()
org.apache.commons.io.input.CountingInputStreamTest.testEOF2()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.net.URL)
org.apache.commons.io.output.XmlStreamWriterTest.testNoXmlHeader()
org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()
org.apache.commons.io.input.compatibility.XmlStreamReader.doLenientDetection($java.lang.String$org.apache.commons.io.input.compatibility.XmlStreamReaderException)
org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard()
org.apache.commons.io.input.compatibility.XmlStreamReader.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.io.InputStream)
org.apache.commons.io.filefilter.FileFilterTestCase.testFalse()
org.apache.commons.io.input.compatibility.XmlStreamReader.close()
org.apache.commons.io.output.CountingOutputStreamTest.testCounting()
org.apache.commons.io.input.compatibility.XmlStreamReader.isTextXml($java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawError($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkContentTypeEncoding($java.lang.String$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()
org.apache.commons.io.input.BOMInputStreamTest.testSkipWithoutBOM()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader.<init>($java.lang.String)
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16LEEncoding()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testTextXml()
org.apache.commons.io.output.XmlStreamWriterTest.testLatin1Encoding()
org.apache.commons.io.output.XmlStreamWriterTest.<init>()
org.apache.commons.io.input.XmlStreamReaderTest.testRawBom()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream)
org.apache.commons.io.input.BOMInputStreamTest.testSkipWithBOM()
org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.File)
org.apache.commons.io.output.XmlStreamWriterTest.checkXmlWriter($java.lang.String$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testOr()
org.apache.commons.io.input.CountingInputStreamTest.testCounting()
org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()
org.apache.commons.io.input.compatibility.XmlStreamReader.getEncoding()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()
org.apache.commons.io.filefilter.FileFilterTestCase.testAnd()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateHttpEncoding()
org.apache.commons.io.input.CountingInputStreamTest.testZeroLength1()
org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()
org.apache.commons.io.filefilter.FileFilterTestCase.testHidden()
org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()
org.apache.commons.io.DirectoryWalkerTestCase.<clinit>()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkHttpError($java.lang.String$boolean$java.lang.String$java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.net.URLConnection)
org.apache.commons.io.output.XmlStreamWriterTest.testEBCDICEncoding()
org.apache.commons.io.input.CountingInputStreamTest.testEOF3()
org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter()
org.apache.commons.io.filefilter.FileFilterTestCase.testTrue()
org.apache.commons.io.input.CountingInputStreamTest.testResetting()
org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog($java.io.BufferedInputStream$java.lang.String)
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testContentTypeMime()
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.checkAppXml($boolean$java.lang.String)
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingStandard()
org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard()
org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()
org.apache.commons.io.DirectoryWalkerTestCaseJava4.createNameFilter($java.io.File[])
org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.calculateRawEncoding($java.lang.String$java.lang.String$java.lang.String$java.lang.String)
org.apache.commons.io.input.compatibility.XmlStreamReader.getXMLGuessEncoding($java.io.BufferedInputStream)
org.apache.commons.io.output.XmlStreamWriterTest.testEUC_JPEncoding()
org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedError_IO_128()
org.apache.commons.io.output.XmlStreamWriterTest.testEmpty()
org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84()
org.apache.commons.io.DirectoryWalkerTestCaseJava4.<clinit>()
org.apache.commons.io.input.compatibility.XmlStreamReader.<init>($java.io.InputStream$java.lang.String$boolean)
org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()
org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument()
